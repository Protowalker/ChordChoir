{"version":3,"sources":["Music/Notes.tsx","reportWebVitals.js","index.tsx"],"names":["NoteLetter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Mode","Note","letter","A","sharp","octave","noteLookup","noteIndex","indexOf","this","Math","pow","getNumber","offset","fromNumber","number","note","parseNote","floor","Modes","props","selectedRef","useRef","modes","value","push","filter","mode","isNaN","parseInt","ref","onChange","current","map","val","selected","currentMode","retNote","ExtensionState","range","start","end","Array","from","length","v","k","Notes","noteRef","startingNumber","startingNote","Grid","container","item","justify","num","toString","Extensions","seventh","Off","ninth","eleventh","Chord","base","Major","extensions","patterns","Minor","Root","Sus2","Sus4","notes","getExtensionOffset","extension","Flat","Normal","Sharp","console","log","ChordPiece","useState","setMode","setNote","Extension","firstRef","secondRef","thirdRef","updateExtension","targetIndex","targetState","checked","extensionState","direction","wrap","alignItems","FormControlLabel","style","margin","control","Checkbox","color","inputRef","ev","target","label","labelPlacement","setSeventh","setNinth","setEleventh","React","useEffect","chord","onChordChange","Box","bgcolor","index","pt","spacing","synth","Tone","volume","toDestination","Home","chordCount","setChordCount","temporaryChordCount","setTemporaryChordCount","fill","chordSequence","setSequence","tempo","setTempo","temporaryTempo","setTemporaryTempo","playing","setPlaying","toneSeq","setToneSeq","a","seq","time","chordIndex","triggerAttackRelease","getArray","stop","Button","onClick","TextField","type","onBlur","newChordCount","slice","newSequence","newTempo","bpm","newChord","entry","updateChordSequence","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f5f25ec.chunk.js","sourcesContent":["import { Grid } from \"@material-ui/core\";\r\nimport { PassThrough } from \"node:stream\";\r\nimport React from \"react\";\r\nimport { useRef } from \"react\";\r\nimport Tone from 'tone';\r\n\r\n\r\nexport enum NoteLetter {\r\n  A = 'A',\r\n  B = 'B',\r\n  C = 'C',\r\n  D = 'D',\r\n  E = 'E',\r\n  F = 'F',\r\n  G = 'G'\r\n}\r\n\r\n\r\n\r\n\r\nexport class Note {\r\n  letter: NoteLetter = NoteLetter.A;\r\n  sharp: boolean =  false;\r\n  octave: number = 0;\r\n\r\n  public getNumber(): number {\r\n    const noteLookup = 'CDEFGBA';\r\n    let noteIndex = noteLookup.indexOf(this.letter) * 2;\r\n    if (noteIndex/2 > noteLookup.indexOf('B')) noteIndex -= 1;\r\n    if (noteIndex/2 > noteLookup.indexOf('E')) noteIndex -= 1;\r\n    \r\n    const num = (this.octave * 12) + noteIndex + (this.sharp ? 1 : 0);\r\n    return num;\r\n  }\r\n\r\n  public getFreq(): number {\r\n    const twelfth_root = 1.059463094359;\r\n    return Math.pow(twelfth_root, this.getNumber() - 49) * 440;\r\n  }\r\n\r\n  public static fromNumber(number: number): Note {\r\n    const notes: Note[] = [\r\n  \r\n      parseNote(\"C\"),\r\n      parseNote(\"C#\"),\r\n      parseNote(\"D\"),\r\n      parseNote(\"D#\"),\r\n      parseNote(\"E\"),\r\n      parseNote(\"F\"),\r\n      parseNote(\"F#\"),\r\n      parseNote(\"G\"),\r\n      parseNote(\"G#\"),\r\n      parseNote(\"A\"),\r\n      parseNote(\"A#\"),\r\n      parseNote(\"B\"),\r\n    ];\r\n    \r\n    \r\n    let note = notes[number % 12];\r\n    const octave = Math.floor(number / 12);\r\n\r\n    note.octave = octave;\r\n    return note;\r\n  }\r\n\r\n  // Get the note that is offset from this one by `offset` half-steps\r\n  public offset(offset: number): Note {\r\n    return Note.fromNumber(this.getNumber() + offset);\r\n  }\r\n\r\n  // Takes the form of A#3\r\n  public toString(): string {\r\n    return this.letter + (this.sharp ? '#' : '') + this.octave;\r\n  }\r\n}\r\n\r\nexport enum Mode {\r\n  Root = \"Root\",\r\n  Major = \"Major\",\r\n  Minor = \"Minor\",\r\n  Sus2 = \"Sus2\",\r\n  Sus4 = \"Sus4\",\r\n}\r\n\r\nexport function Modes(props: { onChange(mode: Mode): void, currentMode: Mode }): React.ReactElement {\r\n  const selectedRef = useRef<HTMLSelectElement>(null);\r\n\r\n  let modes = [];\r\n\r\n  for (const value in Mode) {\r\n    modes.push(value);\r\n  }\r\n\r\n  modes = modes.filter((mode) => isNaN(parseInt(mode)));\r\n\r\n  return (\r\n    <select\r\n      ref={selectedRef}\r\n      onChange={() =>\r\n        props.onChange((selectedRef.current?.value as any) as Mode)\r\n      }\r\n    >\r\n      {modes.map((val) => (\r\n        <option key={val} value={val} selected={val===props.currentMode}>\r\n          {val}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n}\r\n\r\n\r\n// Takes the form of A#3\r\nexport function parseNote(note: string): Note {\r\n    const letter = note[0];\r\n    const sharp = note[1] === \"#\";\r\n    \r\n    let octave: number;\r\n  if (note[1] && note[2])\r\n    octave = parseInt(note[2]);\r\n  else if (!sharp)\r\n    octave = parseInt(note[1]);\r\n  else\r\n    octave = 0;\r\n  \r\n  let retNote = new Note();\r\n  retNote.letter = letter as NoteLetter;\r\n  retNote.octave = octave;\r\n  retNote.sharp = sharp;\r\n\r\n  return retNote;\r\n}\r\n\r\n\r\n\r\nexport const range = (start: number, end: number) => Array.from({length: (end - start)}, (v, k) => k + start);\r\n\r\nexport interface NotesProps {\r\n  startingNote: Note,\r\n  onChange: (note: Note) => void\r\n}\r\n\r\nexport function Notes(props: NotesProps): React.ReactElement {\r\n  const noteRef = useRef<HTMLSelectElement>(null);\r\n  const startingNumber = props.startingNote.getNumber();\r\n\r\n\r\n\r\n  return (\r\n    <Grid container item justify=\"center\">\r\n      <select ref={noteRef} onChange={() => props.onChange(Note.fromNumber(parseInt(noteRef.current?.value ?? 'A0' /*We need to explicitly nullcheck here even though it's impossible for this to ever be null */)))}>\r\n        {range(0, 12).map((num) => {\r\n          return (<option key={num} value={startingNumber + num}> {props.startingNote.offset(num).toString()} </option>);\r\n        })}\r\n      </select>\r\n    </Grid>);\r\n}\r\n\r\nexport enum ExtensionState {\r\n  Off = 0,\r\n  Normal = 1,\r\n  Flat = 2,\r\n  Sharp = 3,\r\n}\r\n\r\nexport class Extensions {\r\n  seventh: ExtensionState = ExtensionState.Off;\r\n  ninth: ExtensionState = ExtensionState.Off;\r\n  eleventh: ExtensionState = ExtensionState.Off;\r\n}\r\n\r\nexport class Chord {\r\n  base: Note;\r\n  mode: Mode;\r\n  extensions: Extensions;\r\n\r\n  constructor(base: Note = parseNote(\"C4\"), mode: Mode = Mode.Major, extensions: Extensions = new Extensions()) {\r\n    this.base = base;\r\n    this.mode = mode;\r\n    this.extensions = extensions;\r\n  }\r\n\r\n  public getArray(): string[] {\r\n    const patterns: { [K in Mode]: number[] } = {\r\n      [Mode.Major]: [0, 4, 7],\r\n      [Mode.Minor]: [0, 3, 7],\r\n      [Mode.Root]: [0, 7],\r\n      [Mode.Sus2]: [0, 2, 7],\r\n      [Mode.Sus4]: [0, 5, 7]\r\n    };\r\n  \r\n    let notes = [];\r\n  \r\n    for (let num of patterns[this.mode]) {\r\n      notes.push(this.base.offset(num).toString());\r\n    }\r\n\r\n    // TODO: Calculate these offsets instead of hardcoding them\r\n    // Seventh = 10 half-steps\r\n    // Ninth = 14 half-steps\r\n    // Eleventh = 17 half-steps\r\n\r\n    console.log(this.extensions);\r\n\r\n    \r\n    function getExtensionOffset(extension: ExtensionState.Flat | ExtensionState.Normal | ExtensionState.Sharp): number {\r\n      return [-1, 0, 1][[ExtensionState.Flat, ExtensionState.Normal, ExtensionState.Sharp].indexOf(extension)];\r\n    }\r\n\r\n    if (this.extensions.seventh !== ExtensionState.Off)\r\n      notes.push(this.base.offset(10 + getExtensionOffset(this.extensions.seventh)).toString());\r\n    \r\n    if (this.extensions.ninth !== ExtensionState.Off)\r\n      notes.push(this.base.offset(14 + getExtensionOffset(this.extensions.ninth)).toString());\r\n      \r\n    \r\n    if (this.extensions.eleventh !== ExtensionState.Off)\r\n      notes.push(this.base.offset(17 + getExtensionOffset(this.extensions.eleventh)).toString());\r\n      \r\n\r\n  \r\n    return notes;\r\n  }\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { parseNote, Notes, Mode, Modes, Chord, range, ExtensionState, Extensions } from \"./Music/Notes\";\nimport {\n  Box,\n  Grid,\n  Checkbox,\n  FormControlLabel,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\nimport * as Tone from \"tone\";\nimport { Clock } from \"tone\";\nimport { spacing } from \"@material-ui/system\";\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nconst AccidentalLabels = {\n  left: { title: \"♭\", value: \"flat\" },\n  center: { title: \"♮\", value: \"normal\" },\n  right: { title: \"♯\", value: \"sharp\" },\n};\n\n\n\n\n\nfunction ChordPiece(props: {\n  chord: Chord;\n  onChordChange: (chord: Chord) => void;\n  index: number;\n}): React.ReactElement {\n  const [mode, setMode] = useState(Mode.Major);\n  const [note, setNote] = useState(parseNote(\"C4\"));\n\n  function Extension(props: {\n    number: number;\n    extensionState: ExtensionState;\n    updateExtension(newExtension: ExtensionState): void;\n  }): React.ReactElement {\n    const firstRef = useRef<HTMLInputElement>(null);\n    const secondRef = useRef<HTMLInputElement>(null);\n    const thirdRef = useRef<HTMLInputElement>(null);\n\n    function updateExtension(targetIndex: 0 | 1 | 2, targetState: boolean) {\n      if (targetState == false) {\n        props.updateExtension(ExtensionState.Off);\n        return;\n      }\n      if (\n        firstRef.current === null ||\n        secondRef.current === null ||\n        thirdRef.current === null\n      )\n        return;\n\n      firstRef.current.checked = false;\n      secondRef.current.checked = false;\n      thirdRef.current.checked = false;\n\n      [firstRef.current, secondRef.current, thirdRef.current][\n        targetIndex\n      ].checked = true;\n \n\n      let extensionState = [ExtensionState.Flat, ExtensionState.Normal, ExtensionState.Sharp][targetIndex];\n\n      props.updateExtension(extensionState);\n    }\n\n    return (\n      <Grid\n        container\n        item\n        direction=\"row\"\n        justify=\"space-between\"\n        wrap=\"nowrap\"\n        alignItems=\"center\"\n      >\n        <FormControlLabel\n          style={{ margin: 0 }}\n          control={\n            <Checkbox\n              color=\"secondary\"\n              inputRef={firstRef}\n              checked={props.extensionState == ExtensionState.Flat }\n              onChange={(ev) => updateExtension(0, ev.target.checked)}\n            />\n          }\n          label=\"♭\"\n          labelPlacement=\"top\"\n        />\n        <FormControlLabel\n          style={{ margin: 0 }}\n          control={\n            <Checkbox\n              color=\"secondary\"\n              inputRef={secondRef}\n              checked={props.extensionState == ExtensionState.Normal}\n              onChange={(ev) => updateExtension(1, ev.target.checked)}\n            />\n          }\n          label={props.number}\n          labelPlacement=\"top\"\n        />\n        <FormControlLabel\n          style={{ margin: 0 }}\n          control={\n            <Checkbox\n              color=\"secondary\"\n              inputRef={thirdRef}\n              checked={props.extensionState == ExtensionState.Sharp}\n              onChange={(ev) => updateExtension(2, ev.target.checked)}\n            />\n          }\n          label=\"♯\"\n          labelPlacement=\"top\"\n        />\n      </Grid>\n    );\n  }\n\n  const [seventh, setSeventh] = useState(ExtensionState.Off);\n  const [ninth, setNinth] = useState(ExtensionState.Off);\n  const [eleventh, setEleventh] = useState(ExtensionState.Off);\n\n\n  React.useEffect(() => {\n    const chord = new Chord(note, mode, {seventh, ninth, eleventh});\n    props.onChordChange(chord);\n  }, [mode, note, seventh, ninth, eleventh]);\n\n  return (\n    <Box bgcolor={props.index % 2 ? \"primary.light\" : \"primary.dark\"} pt={1}>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"stretch\"\n        justify=\"space-around\"\n        spacing={2}\n      >\n        <Notes startingNote={parseNote(\"C4\")} onChange={setNote}></Notes>\n        <Grid container item justify=\"center\">\n          <Modes onChange={setMode} currentMode={mode}></Modes>\n        </Grid>\n        <Grid container item direction=\"column\" alignItems=\"center\">\n          <Extension\n            number={7}\n            extensionState={seventh}\n            updateExtension={setSeventh}\n          />\n          <Extension\n            number={9}\n            extensionState={ninth}\n            updateExtension={setNinth}\n          />\n          <Extension\n            number={11}\n            extensionState={eleventh}\n            updateExtension={setEleventh}\n          />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n\nconst synth = new Tone.PolySynth(Tone.Synth, { volume: -15 }).toDestination();\nTone.Transport.bpm.value = 120;\n\nfunction Home(): React.ReactElement {\n  const [chordCount, setChordCount] = useState(4);\n  const [temporaryChordCount, setTemporaryChordCount] = useState(chordCount);\n\n  const [chordSequence, setSequence] = useState<Chord[]>(\n    Array(chordCount).fill(new Chord())\n  );\n\n  function consolidateChordCount() {\n    let newChordCount = temporaryChordCount;\n    if (isNaN(temporaryChordCount)) {\n      setTemporaryChordCount(0);\n      newChordCount = 0;\n    }\n\n    setChordCount(newChordCount);\n\n    if (chordSequence.length > newChordCount) {\n      setSequence(chordSequence.slice(0, newChordCount));\n    } else if (chordSequence.length < newChordCount) {\n      let newSequence = chordSequence.slice();\n      while (newSequence.length < newChordCount) newSequence.push(new Chord());\n\n      setSequence(newSequence);\n    }\n  }\n\n  function updateChordSequence(entry: Chord, index: number) {\n    let newSequence = chordSequence.slice();\n    newSequence[index] = entry;\n    setSequence(newSequence);\n  }\n\n  const [tempo, setTempo] = useState(120);\n  const [temporaryTempo, setTemporaryTempo] = useState(tempo);\n  function consolidateTempo() {\n    let newTempo = temporaryTempo;\n    if (isNaN(temporaryTempo)) {\n      newTempo = 120;\n      setTemporaryTempo(120);\n    }\n\n    setTempo(newTempo);\n    Tone.Transport.bpm.value = newTempo;\n  }\n\n  const [playing, setPlaying] = useState(false);\n  const [toneSeq, setToneSeq] = useState<Tone.Sequence<number>>(null as any);\n  async function togglePlay() {\n    if (playing === false) {\n      await Tone.start();\n      setPlaying(true);\n      const seq = new Tone.Sequence(\n        (time, chordIndex) => {\n          synth.triggerAttackRelease(\n            chordSequence[chordIndex].getArray(),\n            \"8n\",\n            time + 0.1\n          );\n          // subdivisions are given as subarrays\n        },\n        range(0, chordCount),\n        \"4n\"\n      ).start(0);\n      setToneSeq(seq);\n      Tone.Transport.start(\"+0.1\");\n    } else {\n      toneSeq.stop();\n      Tone.Transport.stop();\n      setPlaying(false);\n    }\n  }\n\n  return (\n    <Box>\n      <Button onClick={togglePlay}>\n        {playing === false ? \"Start\" : \"Stop\"}\n      </Button>\n      <TextField\n        type=\"number\"\n        value={temporaryChordCount}\n        onChange={(ev) =>\n          setTemporaryChordCount(parseInt(ev.target?.value as string))\n        }\n        onBlur={consolidateChordCount}\n        label=\"Note Count\"\n      />\n      <TextField\n        type=\"number\"\n        value={temporaryTempo}\n        onChange={(ev) =>\n          setTemporaryTempo(parseInt(ev.target.value as string))\n        }\n        onBlur={consolidateTempo}\n        label=\"Tempo (BPM)\"\n      />\n      <Grid container>\n        {chordSequence.map((chord: Chord, index: number) => (\n          <ChordPiece\n            key={index}\n            chord={chord}\n            index={index}\n            onChordChange={(newChord) => updateChordSequence(newChord, index)}\n          />\n        ))}\n      </Grid>\n    </Box>\n  );\n}\n\n{\n  ReactDOM.render(\n    <React.StrictMode>\n      <Home />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n}\n"],"sourceRoot":""}