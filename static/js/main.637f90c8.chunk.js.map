{"version":3,"sources":["Music/Notes.tsx","reportWebVitals.js","Music/Chords.tsx","index.tsx"],"names":["NoteLetter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Mode","Note","letter","A","sharp","octave","noteLookup","noteIndex","indexOf","this","Math","pow","getNumber","offset","fromNumber","number","note","parseNote","floor","Modes","props","selectedRef","useRef","modes","value","push","filter","mode","isNaN","parseInt","ref","onChange","current","map","val","selected","currentMode","retNote","ExtensionState","range","start","end","Array","from","length","v","k","Notes","React","memo","noteRef","startingNumber","startingNote","Grid","container","item","justify","num","toString","Extensions","seventh","Off","ninth","eleventh","Chord","base","Major","extensions","patterns","Minor","Root","Sus2","Sus4","notes","getExtensionOffset","extension","Flat","Normal","Sharp","console","log","rhs","JSON","stringify","key","keyDifference","output","ChordExtension","firstRef","secondRef","thirdRef","updateExtension","useCallback","targetIndex","targetState","checked","extensionState","direction","wrap","alignItems","FormControlLabel","style","margin","control","Checkbox","color","inputRef","ev","target","label","labelPlacement","ChordPiece","useState","setMode","setNote","setSeventh","setNinth","setEleventh","onChordChange","index","useEffect","chord","Box","pt","Paper","spacing","baseKey","prevProps","nextProps","isEqual","active","synth","Tone","volume","toDestination","Home","chordCount","setChordCount","toneSeq","fill","chordSequence","setSequence","consolidateChordCount","newChordCount","slice","newSequence","generateSequence","sequence","dispose","seq","time","chordIndex","triggerAttackRelease","getArray","updateChordSequence","entry","setTempo","consolidateTempo","newTempo","bpm","playing","setPlaying","a","stop","pressEnter","func","Button","variant","onClick","TextField","type","defaultValue","onBlur","onKeyDown","e","InputProps","inputProps","min","max","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.637f90c8.chunk.js","sourcesContent":["import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useRef } from \"react\";\n\n\nexport enum NoteLetter {\n  A = 'A',\n  B = 'B',\n  C = 'C',\n  D = 'D',\n  E = 'E',\n  F = 'F',\n  G = 'G'\n}\n\n\n\n\nexport class Note {\n  letter: NoteLetter = NoteLetter.A;\n  sharp: boolean =  false;\n  octave: number = 0;\n\n  public getNumber(): number {\n    const noteLookup = 'CDEFGBA';\n    let noteIndex = noteLookup.indexOf(this.letter) * 2;\n    if (noteIndex/2 > noteLookup.indexOf('B')) noteIndex -= 1;\n    if (noteIndex/2 > noteLookup.indexOf('E')) noteIndex -= 1;\n    \n    const num = (this.octave * 12) + noteIndex + (this.sharp ? 1 : 0);\n    return num;\n  }\n\n  public getFreq(): number {\n    const twelfth_root = 1.059463094359;\n    return Math.pow(twelfth_root, this.getNumber() - 49) * 440;\n  }\n\n  public static fromNumber(number: number): Note {\n    const notes: Note[] = [\n  \n      parseNote(\"C\"),\n      parseNote(\"C#\"),\n      parseNote(\"D\"),\n      parseNote(\"D#\"),\n      parseNote(\"E\"),\n      parseNote(\"F\"),\n      parseNote(\"F#\"),\n      parseNote(\"G\"),\n      parseNote(\"G#\"),\n      parseNote(\"A\"),\n      parseNote(\"A#\"),\n      parseNote(\"B\"),\n    ];\n    \n    \n    let note = notes[number % 12];\n    const octave = Math.floor(number / 12);\n\n    note.octave = octave;\n    return note;\n  }\n\n  // Get the note that is offset from this one by `offset` half-steps\n  public offset(offset: number): Note {\n    return Note.fromNumber(this.getNumber() + offset);\n  }\n\n  // Takes the form of A#3\n  public toString(): string {\n    return this.letter + (this.sharp ? '#' : '') + this.octave;\n  }\n}\n\nexport enum Mode {\n  Root = \"Root\",\n  Major = \"Major\",\n  Minor = \"Minor\",\n  Sus2 = \"Sus2\",\n  Sus4 = \"Sus4\",\n}\n\nexport function Modes(props: { onChange(mode: Mode): void, currentMode: Mode }): React.ReactElement {\n  const selectedRef = useRef<HTMLSelectElement>(null);\n\n  let modes = [];\n\n  for (const value in Mode) {\n    modes.push(value);\n  }\n\n  modes = modes.filter((mode) => isNaN(parseInt(mode)));\n\n  return (\n    <select\n      ref={selectedRef}\n      onChange={() =>\n        props.onChange((selectedRef.current?.value as any) as Mode)\n      }\n    >\n      {modes.map((val) => (\n        <option key={val} value={val} selected={val===props.currentMode}>\n          {val}\n        </option>\n      ))}\n    </select>\n  );\n}\n\n\n// Takes the form of A#3\nexport function parseNote(note: string): Note {\n    const letter = note[0];\n    const sharp = note[1] === \"#\";\n    \n    let octave: number;\n  if (note[1] && note[2])\n    octave = parseInt(note[2]);\n  else if (!sharp)\n    octave = parseInt(note[1]);\n  else\n    octave = 0;\n  \n  let retNote = new Note();\n  retNote.letter = letter as NoteLetter;\n  retNote.octave = octave;\n  retNote.sharp = sharp;\n\n  return retNote;\n}\n\n\n\nexport const range = (start: number, end: number) => Array.from({length: (end - start)}, (v, k) => k + start);\n\nexport interface NotesProps {\n  startingNote: Note,\n  onChange: (note: Note) => void\n}\n\nexport const Notes = React.memo(function(props: NotesProps): React.ReactElement {\n  const noteRef = useRef<HTMLSelectElement>(null);\n  const startingNumber = props.startingNote.getNumber();\n\n  \n\n  return (\n    <Grid container item justify=\"center\">\n      <select ref={noteRef} onChange={() => props.onChange(Note.fromNumber(parseInt(noteRef.current?.value ?? 'A0' /*We need to explicitly nullcheck here even though it's impossible for this to ever be null */)))}>\n        {range(0, 12).map((num) => {\n          return (<option key={num} value={startingNumber + num}> {props.startingNote.offset(num).toString()} </option>);\n        })}\n      </select>\n    </Grid>);\n});\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { useRef, useState } from 'react';\nimport { Box, Paper, Grid, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { Notes, Note, Modes, Mode, parseNote } from './Notes';\n\nexport enum ExtensionState {\n  Off = 0,\n  Normal = 1,\n  Flat = 2,\n  Sharp = 3,\n}\n\nexport class Extensions {\n  seventh: ExtensionState = ExtensionState.Off;\n  ninth: ExtensionState = ExtensionState.Off;\n  eleventh: ExtensionState = ExtensionState.Off;\n}\n\nexport class Chord {\n  base: Note;\n  mode: Mode;\n  extensions: Extensions;\n\n  constructor(base: Note = parseNote(\"C4\"), mode: Mode = Mode.Major, extensions: Extensions = new Extensions()) {\n    this.base = base;\n    this.mode = mode;\n    this.extensions = extensions;\n  }\n\n  public getArray(): string[] {\n    const patterns: { [K in Mode]: number[] } = {\n      [Mode.Major]: [0, 4, 7],\n      [Mode.Minor]: [0, 3, 7],\n      [Mode.Root]: [0, 7],\n      [Mode.Sus2]: [0, 2, 7],\n      [Mode.Sus4]: [0, 5, 7]\n    };\n\n    let notes = [];\n\n    for (let num of patterns[this.mode]) {\n      notes.push(this.base.offset(num).toString());\n    }\n\n    // TODO: Calculate these offsets instead of hardcoding them\n    // Seventh = 10 half-steps\n    // Ninth = 14 half-steps\n    // Eleventh = 17 half-steps\n\n    console.log(this.extensions);\n\n\n    function getExtensionOffset(extension: ExtensionState.Flat | ExtensionState.Normal | ExtensionState.Sharp): number {\n      return [-1, 0, 1][[ExtensionState.Flat, ExtensionState.Normal, ExtensionState.Sharp].indexOf(extension)];\n    }\n\n    if (this.extensions.seventh !== ExtensionState.Off)\n      notes.push(this.base.offset(10 + getExtensionOffset(this.extensions.seventh)).toString());\n\n    if (this.extensions.ninth !== ExtensionState.Off)\n      notes.push(this.base.offset(14 + getExtensionOffset(this.extensions.ninth)).toString());\n\n\n    if (this.extensions.eleventh !== ExtensionState.Off)\n      notes.push(this.base.offset(17 + getExtensionOffset(this.extensions.eleventh)).toString());\n\n\n\n    return notes;\n  }\n\n  public isEqual(rhs: Chord): boolean {\n    return JSON.stringify(this) === JSON.stringify(rhs);\n  }\n\n  public getRelative(key: Note): string {\n    const keyDifference = (this.base.getNumber() - key.getNumber()) % 12;\n    let output = \"\";\n    switch (keyDifference) {\n      case 0:\n      case 1:\n        output = \"I\";\n        break;\n      case 2:\n      case 3:\n        output = \"II\";\n        break;\n      case 4:\n      case 5:\n        output = \"III\";\n        break;\n      case 6:\n      case 7:\n        output = \"IV\";\n        break;\n      case 8:\n      case 9:\n        output = \"V\";\n        break;\n      case 10:\n      case 11:\n        output = \"VI\";\n        break;\n      \n    }\n    if((keyDifference % 2) === 1) { \n      output += \"#\";\n    }\n    return output;\n  }\n}\n\n\n\nconst ChordExtension = React.memo(function (props: {\n  number: number;\n  extensionState: ExtensionState;\n  updateExtension(newExtension: ExtensionState): void;\n}): React.ReactElement {\n  const firstRef = useRef<HTMLInputElement>(null);\n  const secondRef = useRef<HTMLInputElement>(null);\n  const thirdRef = useRef<HTMLInputElement>(null);\n\n  const updateExtension = React.useCallback(function (targetIndex: 0 | 1 | 2, targetState: boolean) {\n    if (targetState === false) {\n      props.updateExtension(ExtensionState.Off);\n      return;\n    }\n    if (\n      firstRef.current === null ||\n      secondRef.current === null ||\n      thirdRef.current === null\n    )\n      return;\n\n    firstRef.current.checked = false;\n    secondRef.current.checked = false;\n    thirdRef.current.checked = false;\n\n    [firstRef.current, secondRef.current, thirdRef.current][\n      targetIndex\n    ].checked = true;\n\n\n    let extensionState = [ExtensionState.Flat, ExtensionState.Normal, ExtensionState.Sharp][targetIndex];\n\n    props.updateExtension(extensionState);\n  }, [props]);\n\n  return (\n    <Grid\n      container\n      item\n      direction=\"row\"\n      justify=\"space-between\"\n      wrap=\"nowrap\"\n      alignItems=\"center\"\n    >\n      <FormControlLabel\n        style={{ margin: 0 }}\n        control={\n          <Checkbox\n            color=\"secondary\"\n            inputRef={firstRef}\n            checked={props.extensionState === ExtensionState.Flat}\n            onChange={(ev) => updateExtension(0, ev.target.checked)}\n          />\n        }\n        label=\"♭\"\n        labelPlacement=\"top\"\n      />\n      <FormControlLabel\n        style={{ margin: 0 }}\n        control={\n          <Checkbox\n            color=\"secondary\"\n            inputRef={secondRef}\n            checked={props.extensionState === ExtensionState.Normal}\n            onChange={(ev) => updateExtension(1, ev.target.checked)}\n          />\n        }\n        label={props.number}\n        labelPlacement=\"top\"\n      />\n      <FormControlLabel\n        style={{ margin: 0 }}\n        control={\n          <Checkbox\n            color=\"secondary\"\n            inputRef={thirdRef}\n            checked={props.extensionState === ExtensionState.Sharp}\n            onChange={(ev) => updateExtension(2, ev.target.checked)}\n          />\n        }\n        label=\"♯\"\n        labelPlacement=\"top\"\n      />\n    </Grid>\n  );\n});\n\n\n\nexport const ChordPiece = React.memo(function (props: {\n  baseKey: Note;\n  chord: Chord;\n  onChordChange: (chord: Chord, index: number) => void;\n  index: number;\n  active: boolean;\n}): React.ReactElement {\n\n  const [mode, setMode] = useState(Mode.Major);\n  const [note, setNote] = useState(parseNote(\"C4\"));\n\n\n  const [seventh, setSeventh] = useState(ExtensionState.Off);\n  const [ninth, setNinth] = useState(ExtensionState.Off);\n  const [eleventh, setEleventh] = useState(ExtensionState.Off);\n\n  const { onChordChange, index } = props;\n  React.useEffect(() => {\n    const chord = new Chord(note, mode, { seventh, ninth, eleventh });\n    // safe to ignore because the function only modifies an object so everything is references\n    onChordChange(chord, index);\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mode, note, seventh, ninth, eleventh, index]);\n\n\n  return (\n    <Box pt={1}>\n      <Paper>\n        <Grid\n          container\n          item\n          direction=\"column\"\n          alignItems=\"stretch\"\n          justify=\"space-around\"\n          spacing={2}\n        >\n          <Notes startingNote={props.baseKey} onChange={setNote}></Notes>\n          <Grid container item justify=\"center\">\n            <Modes onChange={setMode} currentMode={mode}></Modes>\n          </Grid>\n          <Grid container item direction=\"column\" alignItems=\"center\">\n            <ChordExtension\n              number={7}\n              extensionState={seventh}\n              updateExtension={setSeventh}\n            />\n            <ChordExtension\n              number={9}\n              extensionState={ninth}\n              updateExtension={setNinth}\n            />\n            <ChordExtension\n              number={11}\n              extensionState={eleventh}\n              updateExtension={setEleventh}\n            />\n          </Grid>\n        </Grid>\n      </Paper>\n    </Box>\n  );\n}, (prevProps, nextProps) => prevProps.chord.isEqual(nextProps.chord) && prevProps.active === nextProps.active && prevProps.index === nextProps.index && prevProps.onChordChange === nextProps.onChordChange);","import React, { useState, useCallback, useRef, FocusEvent } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {parseNote, range} from \"./Music/Notes\";\nimport { ChordPiece, Chord, } from \"./Music/Chords\";\nimport {\n  Box,\n  Grid,\n  TextField,\n  Button,\n  CssBaseline,\n} from \"@material-ui/core\";\nimport * as Tone from \"tone\";\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\nconst synth = new Tone.PolySynth(Tone.Synth, { volume: -15 }).toDestination();\nTone.Transport.bpm.value = 120;\n\nfunction Home(): React.ReactElement {\n  const [chordCount, setChordCount] = useState(4);\n\n  const toneSeq = useRef<Tone.Sequence<number>>();\n  const [chordSequence, setSequence] = useState<Chord[]>(\n    Array(chordCount).fill(new Chord())\n  );\n\n  const consolidateChordCount = useCallback(function(ev: FocusEvent<HTMLInputElement>) {\n    let newChordCount = parseInt(ev.target.value);\n    if (isNaN(newChordCount)) {\n      newChordCount = 0;\n    }\n\n    setChordCount(newChordCount);\n\n    if (chordSequence.length > newChordCount) {\n      setSequence(chordSequence.slice(0, newChordCount));\n    } else if (chordSequence.length < newChordCount) {\n      let newSequence = chordSequence.slice();\n      while (newSequence.length < newChordCount) newSequence.push(new Chord());\n\n      setSequence(newSequence);\n    }\n  }, [chordSequence]);\n\n  const generateSequence = useCallback(function(sequence: Chord[]) {\n    if(toneSeq.current)\n      toneSeq.current.dispose();\n      \n    const seq = new Tone.Sequence(\n      (time, chordIndex) => {\n        synth.triggerAttackRelease(\n          sequence[chordIndex].getArray(),\n          \"8n\",\n          time + 0.1\n        );\n        // subdivisions are given as subarrays\n      },\n      range(0, chordCount),\n      \"4n\"\n    ).start(0);\n    toneSeq.current = seq;\n  \n  }, [chordCount]);\n\n  const updateChordSequence = useCallback(function(entry: Chord, index: number) {\n    let newSequence = chordSequence.slice();\n    newSequence[index] = entry;\n    setSequence(newSequence);\n    generateSequence(newSequence);\n\n  }, [chordSequence, generateSequence]);\n\n  const [tempo, setTempo] = useState(120);\n  const consolidateTempo = useCallback(function(ev: FocusEvent<HTMLInputElement>) {\n    let newTempo = parseInt(ev.target.value);\n    if (isNaN(newTempo)) {\n      newTempo = 120;\n    }\n\n    setTempo(newTempo);\n    Tone.Transport.bpm.value = newTempo;\n  }, []);\n\n\n  const [playing, setPlaying] = useState(false);\n  async function togglePlay() {\n    if (playing === false) {\n      await Tone.start();\n      setPlaying(true);\n      generateSequence(chordSequence);\n      Tone.Transport.start(\"+0.1\");\n    } else {\n      toneSeq.current?.dispose();\n      Tone.Transport.stop();\n      setPlaying(false);\n    }\n  }\n\n\n  const pressEnter = useCallback((ev: React.KeyboardEvent, func: (ev: any) => void) => {\n    if(ev.key === \"Enter\")\n      func(ev as any);\n  }, []);\n\n  return (\n    <Box>\n      <Button variant=\"contained\" onClick={togglePlay}>\n        {playing === false ? \"Start\" : \"Stop\"}\n      </Button>\n      <TextField\n        type=\"number\"\n        defaultValue={4}\n        onBlur={consolidateChordCount}\n        onKeyDown={(e) => pressEnter(e, consolidateChordCount)}\n        label=\"Note Count\"\n        InputProps={{inputProps: {min:0, max:30}}}\n      />\n      <TextField\n        type=\"number\"\n        defaultValue={120}\n        onKeyDown={(e) => pressEnter(e, consolidateTempo)}\n        onBlur={consolidateTempo}\n        label=\"Tempo (BPM)\"\n      />\n      <Grid container>\n        {chordSequence.map((chord: Chord, index: number) => (\n          <ChordPiece\n            baseKey={parseNote(\"C4\")}\n            key={index}\n            chord={chord}\n            index={index}\n            onChordChange={updateChordSequence}\n            active={false}\n          />\n        ))}\n      </Grid>\n    </Box>\n  );\n}\n\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <CssBaseline />\n      <Home />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n\n"],"sourceRoot":""}