{"version":3,"sources":["Music/Notes.tsx","reportWebVitals.js","Music/Chords.tsx","index.tsx"],"names":["NoteLetter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Mode","Note","letter","A","sharp","octave","noteLookup","noteIndex","indexOf","this","Math","pow","getNumber","offset","fromNumber","number","note","parseNote","unwrap","floor","Modes","props","selectedRef","useRef","modes","value","push","filter","mode","isNaN","parseInt","ref","onChange","current","map","val","selected","currentMode","Maybe","retNote","ExtensionState","range","start","end","Array","from","length","v","k","Notes","noteRef","startingNumber","startingNote","Grid","container","item","justify","num","toString","Extensions","seventh","Off","ninth","eleventh","Chord","base","Major","extensions","patterns","Minor","Root","Sus2","Sus4","notes","getExtensionOffset","extension","Flat","Normal","Sharp","rhs","JSON","stringify","key","keyDifference","output","ChordExtension","React","memo","firstRef","secondRef","thirdRef","updateExtension","useCallback","targetIndex","targetState","checked","extensionState","direction","wrap","alignItems","FormControlLabel","style","margin","control","Checkbox","color","inputRef","ev","target","label","labelPlacement","useStyles","makeStyles","active","background","colors","blueGrey","ChordPiece","useState","setMode","setNote","setSeventh","setNinth","setEleventh","onChordChange","index","baseKey","useEffect","chord","classes","Box","pt","Paper","className","spacing","prevProps","nextProps","synth","Tone","volume","toDestination","Home","chordCount","setChordCount","toneSeq","fill","chordSequence","setSequence","consolidateChordCount","newChordCount","generateSequence","slice","newSequence","activeChord","setActiveChord","sequence","console","log","dispose","seq","time","chordIndex","triggerAttackRelease","getArray","updateChordSequence","entry","setTempo","consolidateTempo","newTempo","bpm","setKey","consolidateKey","newKey","oldChord","newChord","playing","setPlaying","a","stop","pressEnter","func","xs","Button","variant","onClick","TextField","type","defaultValue","onBlur","onKeyDown","e","InputProps","inputProps","min","max","width","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.3d22126a.chunk.js","sourcesContent":["import { Grid } from \"@material-ui/core\";\nimport React, { useEffect } from \"react\";\nimport { useRef } from \"react\";\n\n\nexport enum NoteLetter {\n  A = 'A',\n  B = 'B',\n  C = 'C',\n  D = 'D',\n  E = 'E',\n  F = 'F',\n  G = 'G'\n}\n\n\n\n\nexport class Note {\n  letter: NoteLetter = NoteLetter.A;\n  sharp: boolean = false;\n  octave: number = 0;\n\n  public getNumber(): number {\n    const noteLookup = 'CDEFGBA';\n    let noteIndex = noteLookup.indexOf(this.letter) * 2;\n    if (noteIndex / 2 > noteLookup.indexOf('B')) noteIndex -= 1;\n    if (noteIndex / 2 > noteLookup.indexOf('E')) noteIndex -= 1;\n\n    const num = (this.octave * 12) + noteIndex + (this.sharp ? 1 : 0);\n    return num;\n  }\n\n  public getFreq(): number {\n    const twelfth_root = 1.059463094359;\n    return Math.pow(twelfth_root, this.getNumber() - 49) * 440;\n  }\n\n  public static fromNumber(number: number): Note {\n    const notes: Note[] = [\n\n      parseNote(\"C\").unwrap(),\n      parseNote(\"C#\").unwrap(),\n      parseNote(\"D\").unwrap(),\n      parseNote(\"D#\").unwrap(),\n      parseNote(\"E\").unwrap(),\n      parseNote(\"F\").unwrap(),\n      parseNote(\"F#\").unwrap(),\n      parseNote(\"G\").unwrap(),\n      parseNote(\"G#\").unwrap(),\n      parseNote(\"A\").unwrap(),\n      parseNote(\"A#\").unwrap(),\n      parseNote(\"B\").unwrap(),\n    ];\n\n\n    let note = notes[number % 12];\n    const octave = Math.floor(number / 12);\n\n    note.octave = octave;\n    return note;\n  }\n\n  // Get the note that is offset from this one by `offset` half-steps\n  public offset(offset: number): Note {\n    return Note.fromNumber(this.getNumber() + offset);\n  }\n\n  // Takes the form of A#3\n  public toString(): string {\n    return this.letter + (this.sharp ? '#' : '') + this.octave;\n  }\n}\n\nexport enum Mode {\n  Root = \"Root\",\n  Major = \"Major\",\n  Minor = \"Minor\",\n  Sus2 = \"Sus2\",\n  Sus4 = \"Sus4\",\n}\n\nexport function Modes(props: { onChange(mode: Mode): void, currentMode: Mode }): React.ReactElement {\n  const selectedRef = useRef<HTMLSelectElement>(null);\n\n  let modes = [];\n\n  for (const value in Mode) {\n    modes.push(value);\n  }\n\n  modes = modes.filter((mode) => isNaN(parseInt(mode)));\n\n  return (\n    <select\n      ref={selectedRef}\n      onChange={() =>\n        props.onChange((selectedRef.current?.value as any) as Mode)\n      }\n    >\n      {modes.map((val) => (\n        <option key={val} value={val} selected={val === props.currentMode}>\n          {val}\n        </option>\n      ))}\n    </select>\n  );\n}\n\n\nclass Maybe<T> {\n  #val: T | null;\n  constructor(val: T | null) {\n    this.#val = val;\n  }\n\n  public unwrap(): T {\n    return this.#val as T;\n  }\n\n  public isSome(): boolean {\n    return (this.#val !== null);\n  }\n}\n\nfunction Some<T>(val: T): Maybe<T> {\n  return new Maybe(val);\n}\nfunction None<T>(): Maybe<T> {\n  return new Maybe<T>(null);\n}\n\n\n// Takes the form of A#3\nexport function parseNote(note: string): Maybe<Note> {\n  const letter = note[0];\n  const sharp = note[1] === \"#\";\n\n  let octave: number;\n  if (note[1] && note[2])\n    octave = parseInt(note[2]);\n  else if (!sharp)\n    octave = parseInt(note[1]);\n  else\n    octave = 0;\n\n  if (!(letter in NoteLetter))\n    return None<Note>();\n\n  let retNote = new Note();\n  retNote.letter = letter as NoteLetter;\n  retNote.octave = octave;\n  retNote.sharp = sharp;\n\n  return Some(retNote);\n}\n\n\n\nexport const range = (start: number, end: number) => Array.from({ length: (end - start) }, (v, k) => k + start);\n\nexport interface NotesProps {\n  startingNote: Note,\n  onChange: (note: Note) => void\n}\n\nexport const Notes = function (props: NotesProps): React.ReactElement {\n  const noteRef = useRef<HTMLSelectElement>(null);\n  const startingNumber = props.startingNote.getNumber();\n\n\n  return (\n    <Grid container item justify=\"center\">\n      <select ref={noteRef} onChange={() => props.onChange(Note.fromNumber(parseInt(noteRef.current?.value ?? '0' /*We need to explicitly nullcheck here even though it's impossible for this to ever be null */)))}>\n        {range(0, 12).map((num) => {\n          return (<option key={num} value={startingNumber + num}> {props.startingNote.offset(num).toString()} </option>);\n        })}\n      </select>\n    </Grid>);\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { useRef, useState } from 'react';\nimport { Box, Paper, Grid, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { colors } from '@material-ui/core/';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Notes, Note, Modes, Mode, parseNote } from './Notes';\nimport { omitFromObject } from 'tone/build/esm/core/util/Defaults';\n\nexport enum ExtensionState {\n  Off = 0,\n  Normal = 1,\n  Flat = 2,\n  Sharp = 3,\n}\n\nexport class Extensions {\n  seventh: ExtensionState = ExtensionState.Off;\n  ninth: ExtensionState = ExtensionState.Off;\n  eleventh: ExtensionState = ExtensionState.Off;\n}\n\nexport class Chord {\n  base: Note;\n  mode: Mode;\n  extensions: Extensions;\n\n  constructor(base: Note = parseNote(\"C4\").unwrap(), mode: Mode = Mode.Major, extensions: Extensions = new Extensions()) {\n    this.base = base;\n    this.mode = mode;\n    this.extensions = extensions;\n  }\n\n  public getArray(): string[] {\n    const patterns: { [K in Mode]: number[] } = {\n      [Mode.Major]: [0, 4, 7],\n      [Mode.Minor]: [0, 3, 7],\n      [Mode.Root]: [0, 7],\n      [Mode.Sus2]: [0, 2, 7],\n      [Mode.Sus4]: [0, 5, 7]\n    };\n\n    let notes = [];\n\n    for (let num of patterns[this.mode]) {\n      notes.push(this.base.offset(num).toString());\n    }\n\n    // TODO: Calculate these offsets instead of hardcoding them\n    // Seventh = 10 half-steps\n    // Ninth = 14 half-steps\n    // Eleventh = 17 half-steps\n\n  \n\n    function getExtensionOffset(extension: ExtensionState.Flat | ExtensionState.Normal | ExtensionState.Sharp): number {\n      return [-1, 0, 1][[ExtensionState.Flat, ExtensionState.Normal, ExtensionState.Sharp].indexOf(extension)];\n    }\n\n    if (this.extensions.seventh !== ExtensionState.Off)\n      notes.push(this.base.offset(10 + getExtensionOffset(this.extensions.seventh)).toString());\n\n    if (this.extensions.ninth !== ExtensionState.Off)\n      notes.push(this.base.offset(14 + getExtensionOffset(this.extensions.ninth)).toString());\n\n\n    if (this.extensions.eleventh !== ExtensionState.Off)\n      notes.push(this.base.offset(17 + getExtensionOffset(this.extensions.eleventh)).toString());\n\n\n\n    return notes;\n  }\n\n  public isEqual(rhs: Chord): boolean {\n    return JSON.stringify(this) === JSON.stringify(rhs);\n  }\n\n  public getRelative(key: Note): string {\n    const keyDifference = (this.base.getNumber() - key.getNumber()) % 12;\n    let output = \"\";\n    switch (keyDifference) {\n      case 0:\n      case 1:\n        output = \"I\";\n        break;\n      case 2:\n      case 3:\n        output = \"II\";\n        break;\n      case 4:\n      case 5:\n        output = \"III\";\n        break;\n      case 6:\n      case 7:\n        output = \"IV\";\n        break;\n      case 8:\n      case 9:\n        output = \"V\";\n        break;\n      case 10:\n      case 11:\n        output = \"VI\";\n        break;\n      \n    }\n    if((keyDifference % 2) === 1) { \n      output += \"#\";\n    }\n    return output;\n  }\n}\n\n\n\nconst ChordExtension = React.memo(function (props: {\n  number: number;\n  extensionState: ExtensionState;\n  updateExtension(newExtension: ExtensionState): void;\n}): React.ReactElement {\n  const firstRef = useRef<HTMLInputElement>(null);\n  const secondRef = useRef<HTMLInputElement>(null);\n  const thirdRef = useRef<HTMLInputElement>(null);\n\n  const updateExtension = React.useCallback(function (targetIndex: 0 | 1 | 2, targetState: boolean) {\n    if (targetState === false) {\n      props.updateExtension(ExtensionState.Off);\n      return;\n    }\n    if (\n      firstRef.current === null ||\n      secondRef.current === null ||\n      thirdRef.current === null\n    )\n      return;\n\n    firstRef.current.checked = false;\n    secondRef.current.checked = false;\n    thirdRef.current.checked = false;\n\n    [firstRef.current, secondRef.current, thirdRef.current][\n      targetIndex\n    ].checked = true;\n\n\n    let extensionState = [ExtensionState.Flat, ExtensionState.Normal, ExtensionState.Sharp][targetIndex];\n\n    props.updateExtension(extensionState);\n  }, [props]);\n\n  return (\n    <Grid\n      container\n      item\n      direction=\"row\"\n      justify=\"space-between\"\n      wrap=\"nowrap\"\n      alignItems=\"center\"\n    >\n      <FormControlLabel\n        style={{ margin: 0 }}\n        control={\n          <Checkbox\n            color=\"secondary\"\n            inputRef={firstRef}\n            checked={props.extensionState === ExtensionState.Flat}\n            onChange={(ev) => updateExtension(0, ev.target.checked)}\n          />\n        }\n        label=\"♭\"\n        labelPlacement=\"top\"\n      />\n      <FormControlLabel\n        style={{ margin: 0 }}\n        control={\n          <Checkbox\n            color=\"secondary\"\n            inputRef={secondRef}\n            checked={props.extensionState === ExtensionState.Normal}\n            onChange={(ev) => updateExtension(1, ev.target.checked)}\n          />\n        }\n        label={props.number}\n        labelPlacement=\"top\"\n      />\n      <FormControlLabel\n        style={{ margin: 0 }}\n        control={\n          <Checkbox\n            color=\"secondary\"\n            inputRef={thirdRef}\n            checked={props.extensionState === ExtensionState.Sharp}\n            onChange={(ev) => updateExtension(2, ev.target.checked)}\n          />\n        }\n        label=\"♯\"\n        labelPlacement=\"top\"\n      />\n    </Grid>\n  );\n});\n\nconst useStyles = makeStyles({\n  active: {\n    \n    background: colors.blueGrey[100]\n}});\n\nexport const ChordPiece = React.memo(function (props: {\n  baseKey: Note;\n  chord: Chord;\n  onChordChange: (chord: Chord, index: number) => void;\n  index: number;\n  active: boolean;\n}): React.ReactElement {\n\n  const [mode, setMode] = useState(Mode.Major);\n  const [note, setNote] = useState(parseNote(\"C4\").unwrap());\n\n\n  const [seventh, setSeventh] = useState(ExtensionState.Off);\n  const [ninth, setNinth] = useState(ExtensionState.Off);\n  const [eleventh, setEleventh] = useState(ExtensionState.Off);\n\n  const {onChordChange, index, baseKey } = props;\n  React.useEffect(() => {\n    const chord = new Chord(note, mode, { seventh, ninth, eleventh });\n    // safe to ignore because the function only modifies an object so everything is references\n    onChordChange(chord, index);\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mode, note, seventh, ninth, eleventh, index]);\n\n  const classes = useStyles();\n\n  return (\n    <Box pt={1}>\n      <Paper className={props.active ? classes.active : \"\"}>\n        <Grid\n          container\n          item\n          direction=\"column\"\n          alignItems=\"stretch\"\n          justify=\"space-around\"\n          spacing={2}\n        >\n          <Notes startingNote={baseKey} onChange={setNote}></Notes>\n          <Grid container item justify=\"center\">\n            <Modes onChange={setMode} currentMode={mode}></Modes>\n          </Grid>\n          <Grid container item direction=\"column\" alignItems=\"center\">\n            <ChordExtension\n              number={7}\n              extensionState={seventh}\n              updateExtension={setSeventh}\n            />\n            <ChordExtension\n              number={9}\n              extensionState={ninth}\n              updateExtension={setNinth}\n            />\n            <ChordExtension\n              number={11}\n              extensionState={eleventh}\n              updateExtension={setEleventh}\n            />\n          </Grid>\n        </Grid>\n      </Paper>\n    </Box>\n  );\n}, (prevProps, nextProps) => JSON.stringify(prevProps) === JSON.stringify(nextProps) && prevProps.onChordChange === nextProps.onChordChange);\n\n","import React, { useState, useCallback, useRef, FocusEvent } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Note, parseNote, range } from \"./Music/Notes\";\nimport { ChordPiece, Chord, } from \"./Music/Chords\";\nimport {\n  Box,\n  Grid,\n  TextField,\n  Button,\n  CssBaseline,\n} from \"@material-ui/core\";\nimport * as Tone from \"tone\";\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\nconst synth = new Tone.PolySynth(Tone.Synth, { volume: -15 }).toDestination();\nTone.Transport.bpm.value = 120;\n\nfunction Home(): React.ReactElement {\n  const [chordCount, setChordCount] = useState(4);\n\n  const toneSeq = useRef<Tone.Sequence<number>>();\n  const [chordSequence, setSequence] = useState<Chord[]>(\n    Array(chordCount).fill(new Chord())\n  );\n\n  const consolidateChordCount = useCallback(function (ev: FocusEvent<HTMLInputElement>) {\n    let newChordCount = parseInt(ev.target.value);\n    if (isNaN(newChordCount)) {\n      newChordCount = 0;\n    }\n\n    setChordCount(newChordCount);\n\n    if (chordSequence.length > newChordCount) {\n      generateSequence(chordSequence.slice(0, newChordCount));\n      setSequence(chordSequence.slice(0, newChordCount));\n    } else if (chordSequence.length < newChordCount) {\n      let newSequence = chordSequence.slice();\n      while (newSequence.length < newChordCount) newSequence.push(new Chord());\n\n      generateSequence(newSequence);\n      setSequence(newSequence);\n    }\n  }, [chordSequence]);\n\n\n  const [activeChord, setActiveChord] = useState(-1);\n  const generateSequence = useCallback(function (sequence: Chord[]) {\n    console.log(\"called\");\n    if (toneSeq.current)\n      toneSeq.current.dispose();\n\n    const seq = new Tone.Sequence(\n      (time, chordIndex) => {\n        setActiveChord(chordIndex);\n        synth.triggerAttackRelease(\n          sequence[chordIndex].getArray(),\n          \"8n\",\n          time\n        );\n        // subdivisions are given as subarrays\n      },\n      range(0, sequence.length),\n      \"4n\"\n    ).start(0);\n    toneSeq.current = seq;\n\n  }, [chordCount]);\n\n  const updateChordSequence = useCallback(function (entry: Chord, index: number) {\n    let newSequence = chordSequence.slice();\n    newSequence[index] = entry;\n    setSequence(newSequence);\n    generateSequence(newSequence);\n\n  }, [chordSequence, generateSequence]);\n\n  const [tempo, setTempo] = useState(120);\n  const consolidateTempo = useCallback(function (ev: FocusEvent<HTMLInputElement>) {\n    let newTempo = parseInt(ev.target.value);\n    if (isNaN(newTempo)) {\n      newTempo = 120;\n    }\n\n    setTempo(newTempo);\n    Tone.Transport.bpm.value = newTempo;\n  }, []);\n\n\n  const [key, setKey] = useState(parseNote(\"C4\").unwrap());\n  const consolidateKey = useCallback(function (ev: FocusEvent<HTMLInputElement>) {\n      const newKey = parseNote(ev.target?.value ?? 'C4').unwrap();\n      // We need to update all the chords at once\n      let newSequence = chordSequence.slice();\n      for(let chord in newSequence) {\n        // offset of the note\n        // Changing the old chord makes javascript angry because it can't just have explicit references like a sane language\n        // So instead we make a copy of it\n        // And change that\n        const oldChord = newSequence[chord];\n        let newChord = new Chord(oldChord.base, oldChord.mode, oldChord.extensions);\n\n        const offset = newChord.base.getNumber() - key.getNumber();\n        newChord.base = newKey.offset(offset);\n\n        // Update the sequence with the new chord\n        newSequence[chord] = newChord;\n      }\n      setKey(newKey);\n      setSequence(newSequence);\n      generateSequence(newSequence);\n\n  }, [chordSequence, generateSequence]);\n\n  const [playing, setPlaying] = useState(false);\n  async function togglePlay() {\n    if (playing === false) {\n      await Tone.start();\n      setPlaying(true);\n      generateSequence(chordSequence);\n      Tone.Transport.start(\"+0.1\");\n    } else {\n      toneSeq.current?.dispose();\n      Tone.Transport.stop();\n      setPlaying(false);\n      setActiveChord(-1);\n    }\n  }\n\n\n  const pressEnter = useCallback((ev: React.KeyboardEvent, func: (ev: any) => void) => {\n    if (ev.key === \"Enter\")\n      func(ev as any);\n  }, []);\n\n  return (\n    <Box>\n      <Grid container direction=\"row\" alignItems=\"flex-end\" justify=\"space-evenly\" xs={3}>\n        <Button variant=\"contained\" onClick={togglePlay}>\n          {playing === false ? \"Start\" : \"Stop\"}\n        </Button>\n        <TextField\n          type=\"number\"\n          defaultValue={4}\n          onBlur={consolidateChordCount}\n          onKeyDown={(e) => pressEnter(e, consolidateChordCount)}\n          onClick={(e) => consolidateChordCount(e as any)}\n          label=\"Note Count\"\n          InputProps={{ inputProps: { min: 0, max: 30 } }}\n          style={{ width: \"25%\" }}\n        />\n        <TextField\n          type=\"number\"\n          defaultValue={120}\n          onKeyDown={(e) => pressEnter(e, consolidateTempo)}\n          onBlur={consolidateTempo}\n          onClick={(e) => consolidateTempo(e as any)}\n          label=\"Tempo (BPM)\"\n          style={{ width: \"25%\" }}\n        />\n        <TextField \n          defaultValue=\"C4\"\n          onKeyDown={(e) => pressEnter(e, consolidateKey)}\n          onBlur={consolidateKey}\n          onClick={(e) => consolidateKey(e as any)}\n          label=\"Key\"\n          style={{ width: \"25%\" }}\n        />\n      </Grid>\n      <Grid container>\n        {chordSequence.map((chord: Chord, index: number) => (\n          <ChordPiece\n            baseKey={key}\n            key={index}\n            chord={chord}\n            index={index}\n            onChordChange={updateChordSequence}\n            active={activeChord === index}\n          />\n        ))}\n      </Grid>\n    </Box>\n  );\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <Home />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\n"],"sourceRoot":""}