{"version":3,"sources":["Music/Notes.tsx","reportWebVitals.js","Music/Chords.tsx","ChordSequenceReducer.ts","Fields.tsx","Player.tsx","index.tsx"],"names":["NoteLetter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Mode","Note","letter","A","sharp","octave","noteLookup","noteIndex","indexOf","this","Math","pow","getNumber","offset","fromNumber","key","output","number","note","parseNote","unwrap","floor","Modes","props","selectedRef","useRef","modes","value","push","filter","mode","isNaN","parseInt","ref","onChange","current","map","val","selected","currentMode","Maybe","toUpperCase","retNote","ExtensionState","range","start","end","Array","from","length","v","k","Notes","React","memo","noteRef","startingNumber","startingNote","console","log","toString","useEffect","createDropdownText","useCallback","num","getRelative","Grid","container","item","justify","Extensions","seventh","Off","ninth","eleventh","Chord","base","Major","extensions","patterns","Minor","Root","Sus2","Sus4","notes","getExtensionOffset","extension","Flat","Normal","Sharp","rhs","JSON","stringify","ChordExtension","firstRef","secondRef","thirdRef","updateExtension","targetIndex","targetState","checked","extensionState","direction","wrap","alignItems","FormControlLabel","style","margin","control","Checkbox","color","inputRef","ev","target","label","labelPlacement","useStyles","makeStyles","theme","inactive","background","palette","paper","active","primary","dark","ChordPiece","useState","setMode","setNote","setSeventh","setNinth","setEleventh","onChordChange","index","baseKey","chord","classes","useDrag","type","Box","pt","mr","mt","Paper","elevation","className","spacing","prevProps","nextProps","chordSequenceReducer","oldState","action","kind","newState","slice","undefined","splice","newChord","startIndex","endIndex","oldIndex","newIndex","i","NumberField","defaultValue","update","rest","setValue","validateChange","newVal","isFinite","updateVal","TextField","onKeyDown","func","pressEnter","onBlur","onClick","Player","synth","chordCount","setChordCount","tempo","setTempo","setKey","playing","setPlaying","toneSeq","useReducer","fill","chordSequence","dispatchSequence","activeChord","setActiveChord","Tone","bpm","seq","time","chordIndex","triggerAttackRelease","getArray","dispose","consolidateKey","newKey","oldChord","a","stop","updateChord","countProps","useMemo","inputProps","min","max","countStyle","width","xs","Button","variant","InputProps","e","volume","toDestination","darkTheme","createMuiTheme","Home","CssBaseline","DndProvider","backend","HTML5Backend","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mJAKYA,E,qFCOGC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,kIDFFF,K,MAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,OAAAA,M,KAaL,IAsGKU,EAtGCC,EAAb,iDACEC,OAAqBZ,EAAWa,EADlC,KAEEC,OAAiB,EAFnB,KAGEC,OAAiB,EAHnB,6CAKE,WACE,IAAMC,EAAa,UACfC,EAA8C,EAAlCD,EAAWE,QAAQC,KAAKP,QAKxC,OAHKK,EAAY,EAAKD,EAAWE,QAAQ,OAAMD,GAAa,GAEjC,GAAdE,KAAKJ,OAAeE,GAAaE,KAAKL,MAAQ,EAAI,KAXnE,qBAeE,WAEE,OAAuD,IAAhDM,KAAKC,IADS,eACSF,KAAKG,YAAc,MAjBrD,oBA6CE,SAAcC,GACZ,OAAOZ,EAAKa,WAAWL,KAAKG,YAAcC,KA9C9C,sBAkDE,WACE,OAAOJ,KAAKP,QAAUO,KAAKL,MAAQ,IAAM,IAAMK,KAAKJ,SAnDxD,yBAsDE,SAAmBU,GACjB,IACIC,EAAS,GACb,QAFuBP,KAAKG,YAAcG,EAAIH,aAAe,IAG3D,KAAK,EACHI,EAAS,IACT,MACF,KAAK,EACHA,EAAS,KACT,MACF,KAAK,EACHA,EAAS,KACT,MACF,KAAK,EACHA,EAAS,MACT,MACF,KAAK,EACHA,EAAS,MACT,MACF,KAAK,EACHA,EAAS,KACT,MACF,KAAK,EACHA,EAAS,MACT,MACF,KAAK,EACHA,EAAS,IACT,MACF,KAAK,EACHA,EAAS,KACT,MACF,KAAK,EACHA,EAAS,KACT,MACF,KAAK,GACHA,EAAS,MACT,MACF,KAAK,GACHA,EAAS,MACT,MACF,QACEA,EAAS,MAGb,OAAOA,KAlGX,yBAoBE,SAAyBC,GACvB,IAgBIC,EAhBkB,CACpBC,EAAU,KAAKC,SACfD,EAAU,MAAMC,SAChBD,EAAU,KAAKC,SACfD,EAAU,MAAMC,SAChBD,EAAU,KAAKC,SACfD,EAAU,KAAKC,SACfD,EAAU,MAAMC,SAChBD,EAAU,KAAKC,SACfD,EAAU,MAAMC,SAChBD,EAAU,KAAKC,SACfD,EAAU,MAAMC,SAChBD,EAAU,KAAKC,UAIAH,EAAS,IACpBZ,EAASK,KAAKW,MAAMJ,EAAS,IAGnC,OADAC,EAAKb,OAASA,EACPa,MAzCX,KA8GO,SAASI,EAAMC,GACpB,IAAMC,EAAcC,iBAA0B,MAE1CC,EAAQ,GAEZ,IAAK,IAAMC,KAAS3B,EAClB0B,EAAME,KAAKD,GAKb,OAFAD,EAAQA,EAAMG,QAAO,SAACC,GAAD,OAAUC,MAAMC,SAASF,OAG5C,wBACEG,IAAKT,EACLU,SAAU,wBACRX,EAAMW,SAAN,UAAgBV,EAAYW,eAA5B,aAAgB,EAAqBR,QAHzC,SAMGD,EAAMU,KAAI,SAACC,GAAD,OACT,wBAAkBV,MAAOU,EAAKC,SAAUD,IAAQd,EAAMgB,YAAtD,SACGF,GADUA,S,SA3BTrC,K,YAAAA,E,cAAAA,E,cAAAA,E,YAAAA,E,aAAAA,M,8BAoCNwC,E,WAEJ,WAAYH,GAAgB,6EAC1B,YAAA5B,KAAA,MAAY4B,E,0CAGd,WACE,OAAO,YAAA5B,KAAP,Q,oBAGF,WACE,OAAsB,OAAd,YAAAA,KAAA,U,KAaL,SAASU,EAAUD,GAA4B,IAAD,IAI/Cb,EAHEH,EAAM,oBAAGgB,EAAK,UAAR,aAAG,EAASuB,qBAAZ,QAA6B,IACnCrC,EAAoB,MAAZc,EAAK,GAUnB,GANEb,EADEa,EAAK,IAAMA,EAAK,GACTc,SAASd,EAAK,KACfd,GAASc,EAAK,GACbc,SAASd,EAAK,IAEd,IAELhB,KAAUZ,GACd,OAlBK,IAAIkD,EAAS,MAoBpB,IAAIE,EAAU,IAAIzC,EAKlB,OAJAyC,EAAQxC,OAASA,EACjBwC,EAAQrC,OAASA,EACjBqC,EAAQtC,MAAQA,EA1BT,IAAIoC,EA4BCE,GAKP,IE9LKC,EF8LCC,EAAQ,SAACC,EAAeC,GAAhB,OAAgCC,MAAMC,KAAK,CAAEC,OAASH,EAAMD,IAAU,SAACK,EAAGC,GAAJ,OAAUA,EAAIN,MAO5FO,EAAQC,IAAMC,MAAK,SAAU/B,GACxC,IAAMgC,EAAU9B,iBAA0B,MACpC+B,EAAiBjC,EAAMkC,aAAa7C,YAC1C8C,QAAQC,IAAI,SAAWpC,EAAMkC,aAAaG,WAAa,WAAaJ,GAGpEH,IAAMQ,WAAU,0BAAMtC,EAAMW,SAASjC,EAAKa,WAAWkB,SAAQ,oBAACuB,EAAQpB,eAAT,aAAC,EAAiBR,aAAlB,QAA2B,SAAQ,CAACJ,EAAMkC,eAGvG,IAAMK,EAAqBT,IAAMU,aAAY,SAACC,GAM5C,OAJiBzC,EAAMkC,aAAa5C,OAAOmD,GAAKJ,WAI5B,QAFC,IAAMrC,EAAMkC,aAAa5C,OAAOmD,GAAKC,YAAY1C,EAAMkC,cAAgB,OAK3F,CAAClC,EAAMkC,eAGV,OACE,cAACS,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAI,EAACC,QAAQ,SAA7B,SACE,wBAAQpC,IAAKsB,EAASrB,SAAU,0BAAMX,EAAMW,SAASjC,EAAKa,WAAWkB,SAAQ,oBAACuB,EAAQpB,eAAT,aAAC,EAAiBR,aAAlB,QAA2B,QAAxG,SACGiB,EAAM,EAAG,IAAIR,KAAI,SAAC4B,GACjB,OAAQ,yBAAkBrC,MAAO6B,EAAiBQ,EAA1C,cAAiDF,EAAmBE,GAApE,MAAaA,a,mBE9NnBrB,O,aAAAA,I,mBAAAA,I,eAAAA,I,kBAAAA,M,KAOL,IAAM2B,EAAb,sCACEC,QAA0B5B,EAAe6B,IAD3C,KAEEC,MAAwB9B,EAAe6B,IAFzC,KAGEE,SAA2B/B,EAAe6B,KAG/BG,EAAb,WAKE,aAIG,IAHDC,EAGA,uDAHazD,EAAU,MAAMC,SAC7BU,EAEA,uDAFa9B,EAAK6E,MAClBC,EACA,uDADyB,IAAIR,EAC7B,yBARFM,UAQE,OAPF9C,UAOE,OANFgD,gBAME,EACArE,KAAKmE,KAAOA,EACZnE,KAAKqB,KAAOA,EACZrB,KAAKqE,WAAaA,EAZtB,4CAeE,WAA6B,IAAD,IACpBC,GAAmC,mBACtC/E,EAAK6E,MAAQ,CAAC,EAAG,EAAG,IADkB,cAEtC7E,EAAKgF,MAAQ,CAAC,EAAG,EAAG,IAFkB,cAGtChF,EAAKiF,KAAO,CAAC,EAAG,IAHsB,cAItCjF,EAAKkF,KAAO,CAAC,EAAG,EAAG,IAJmB,cAKtClF,EAAKmF,KAAO,CAAC,EAAG,EAAG,IALmB,GAQrCC,EAAQ,GATc,cAWVL,EAAStE,KAAKqB,OAXJ,IAW1B,2BAAqC,CAAC,IAA7BkC,EAA4B,QACnCoB,EAAMxD,KAAKnB,KAAKmE,KAAK/D,OAAOmD,GAAKJ,aAZT,8BAoB1B,SAASyB,EACPC,GAKA,MAAO,EAAE,EAAG,EAAG,GACb,CACE3C,EAAe4C,KACf5C,EAAe6C,OACf7C,EAAe8C,OACfjF,QAAQ8E,IAyBd,OArBI7E,KAAKqE,WAAWP,UAAY5B,EAAe6B,KAC7CY,EAAMxD,KACJnB,KAAKmE,KACF/D,OAAO,GAAKwE,EAAmB5E,KAAKqE,WAAWP,UAC/CX,YAGHnD,KAAKqE,WAAWL,QAAU9B,EAAe6B,KAC3CY,EAAMxD,KACJnB,KAAKmE,KACF/D,OAAO,GAAKwE,EAAmB5E,KAAKqE,WAAWL,QAC/Cb,YAGHnD,KAAKqE,WAAWJ,WAAa/B,EAAe6B,KAC9CY,EAAMxD,KACJnB,KAAKmE,KACF/D,OAAO,GAAKwE,EAAmB5E,KAAKqE,WAAWJ,WAC/Cd,YAGAwB,IAvEX,qBA0EE,SAAeM,GACb,OAAOC,KAAKC,UAAUnF,QAAUkF,KAAKC,UAAUF,OA3EnD,KA+EMG,EAAiBxC,IAAMC,MAAK,SAAU/B,GAK1C,IAAMuE,EAAWrE,iBAAyB,MACpCsE,EAAYtE,iBAAyB,MACrCuE,EAAWvE,iBAAyB,MAEpCwE,EAAkB5C,IAAMU,aAC5B,SAAUmC,EAAwBC,GAChC,IAAoB,IAAhBA,GAIJ,GACuB,OAArBL,EAAS3D,SACa,OAAtB4D,EAAU5D,SACW,OAArB6D,EAAS7D,QAHX,CAOA2D,EAAS3D,QAAQiE,SAAU,EAC3BL,EAAU5D,QAAQiE,SAAU,EAC5BJ,EAAS7D,QAAQiE,SAAU,EAE3B,CAACN,EAAS3D,QAAS4D,EAAU5D,QAAS6D,EAAS7D,SAC7C+D,GACAE,SAAU,EAEZ,IAAIC,EAAiB,CACnB1D,EAAe4C,KACf5C,EAAe6C,OACf7C,EAAe8C,OACfS,GAEF3E,EAAM0E,gBAAgBI,SAxBpB9E,EAAM0E,gBAAgBtD,EAAe6B,OA0BzC,CAACjD,IAGH,OACE,eAAC2C,EAAA,EAAD,CACEC,WAAS,EACTC,MAAI,EACJkC,UAAU,MACVjC,QAAQ,gBACRkC,KAAK,SACLC,WAAW,SANb,UAQE,cAACC,EAAA,EAAD,CACEC,MAAO,CAAEC,OAAQ,GACjBC,QACE,cAACC,EAAA,EAAD,CACEC,MAAM,YACNC,SAAUjB,EACVM,QAAS7E,EAAM8E,iBAAmB1D,EAAe4C,KACjDrD,SAAU,SAAC8E,GAAD,OAAQf,EAAgB,EAAGe,EAAGC,OAAOb,YAGnDc,MAAM,SACNC,eAAe,QAEjB,cAACV,EAAA,EAAD,CACEC,MAAO,CAAEC,OAAQ,GACjBC,QACE,cAACC,EAAA,EAAD,CACEC,MAAM,YACNC,SAAUhB,EACVK,QAAS7E,EAAM8E,iBAAmB1D,EAAe6C,OACjDtD,SAAU,SAAC8E,GAAD,OAAQf,EAAgB,EAAGe,EAAGC,OAAOb,YAGnDc,MAAO3F,EAAMN,OACbkG,eAAe,QAEjB,cAACV,EAAA,EAAD,CACEC,MAAO,CAAEC,OAAQ,GACjBC,QACE,cAACC,EAAA,EAAD,CACEC,MAAM,YACNC,SAAUf,EACVI,QAAS7E,EAAM8E,iBAAmB1D,EAAe8C,MACjDvD,SAAU,SAAC8E,GAAD,OAAQf,EAAgB,EAAGe,EAAGC,OAAOb,YAGnDc,MAAM,SACNC,eAAe,cAMjBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,SAAU,CACRC,WAAYF,EAAMG,QAAQD,WAAWE,OAGvCC,OAAQ,CACNH,WAAYF,EAAMG,QAAQG,QAAQC,UAIzBC,EAAazE,IAAMC,MAC9B,SAAU/B,GAOR,MAAwBwG,mBAAS/H,EAAK6E,OAAtC,mBAAO/C,EAAP,KAAakG,EAAb,KACA,EAAwBD,mBAAS5G,EAAU,MAAMC,UAAjD,mBAAOF,EAAP,KAAa+G,EAAb,KAEA,EAA8BF,mBAASpF,EAAe6B,KAAtD,mBAAOD,EAAP,KAAgB2D,EAAhB,KACA,EAA0BH,mBAASpF,EAAe6B,KAAlD,mBAAOC,EAAP,KAAc0D,EAAd,KACA,EAAgCJ,mBAASpF,EAAe6B,KAAxD,mBAAOE,EAAP,KAAiB0D,EAAjB,KAEQC,EAAkC9G,EAAlC8G,cAAeC,EAAmB/G,EAAnB+G,MAAOC,EAAYhH,EAAZgH,QAC9BlF,IAAMQ,WAAU,WACd,IAAM2E,EAAQ,IAAI7D,EAAMzD,EAAMY,EAAM,CAAEyC,UAASE,QAAOC,aAEtD2D,EAAcG,EAAOF,KAEpB,CAACxG,EAAMZ,EAAMqD,EAASE,EAAOC,EAAU4D,IAE1C,IAAMG,EAAUrB,IAEhB,EAAqBsB,YAAQ,CAC3BC,KAAM,UADR,6BAIA,OAGE,aAFA,CAECC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAK9G,IAAKV,EAAMU,IAAvC,SACE,cAAC+G,EAAA,EAAD,CAAOC,UAAW,EAAGC,UAAW3H,EAAMoG,OAASc,EAAQd,OAASc,EAAQlB,SAAxE,SACE,eAACrD,EAAA,EAAD,CACEC,WAAS,EACTC,MAAI,EACJkC,UAAU,SACVE,WAAW,UACXnC,QAAQ,eACR8E,QAAS,EANX,UAQE,cAAC/F,EAAD,CAAOK,aAAc8E,EAASrG,SAAU+F,IACxC,cAAC/D,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAI,EAACC,QAAQ,SAA7B,SACE,cAAC/C,EAAD,CAAOY,SAAU8F,EAASzF,YAAaT,MAEzC,eAACoC,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAI,EAACkC,UAAU,SAASE,WAAW,SAAnD,UACE,cAACX,EAAD,CACE5E,OAAQ,EACRoF,eAAgB9B,EAChB0B,gBAAiBiC,IAEnB,cAACrC,EAAD,CACE5E,OAAQ,EACRoF,eAAgB5B,EAChBwB,gBAAiBkC,IAEnB,cAACtC,EAAD,CACE5E,OAAQ,GACRoF,eAAgB3B,EAChBuB,gBAAiBmC,iBAQ/B,SAACgB,EAAWC,GAAZ,OACE1D,KAAKC,UAAUwD,KAAezD,KAAKC,UAAUyD,MC7MlCC,EAtCc,SAACC,EAAmBC,GAC/C,OAAQA,EAAOC,MACb,IAAK,MACH,IAAIC,EAAWH,EAASI,QAGxB,YAFqBC,IAAjBJ,EAAOlB,QAAqBkB,EAAOlB,OAAS,GAChDoB,EAASG,OAAOL,EAAOlB,MAAO,EAAGkB,EAAOM,UACjCJ,EAGT,IAAK,SACH,IAAIA,EAAWH,EAASI,QAExB,OADAD,EAASG,OAAOL,EAAOO,WAAYP,EAAOQ,SAAWR,EAAOO,YACrDL,EAET,IAAK,SACH,IAAIA,EAAWH,EAASI,QAExB,OADAD,EAASF,EAAOlB,OAASkB,EAAOM,SACzBJ,EAET,IAAK,OACH,IAAIA,EAAWH,EAASI,QACpBnB,EAAQkB,EAASG,OAAOL,EAAOS,SAAU,GAAG,GAEhD,OADAP,EAASG,OAAOL,EAAOU,SAAU,EAAG1B,GAC7BkB,EAET,IAAK,YACH,IAAIA,EAAWH,EAASI,MAAM,EAAGH,EAAOvG,QACxC,GAAIuG,EAAOvG,OAASsG,EAAStG,OAC3B,IAAK,IAAIkH,EAAIZ,EAAStG,OAAQkH,EAAIX,EAAOvG,OAAQkH,IAC/CT,EAAS9H,KAAK,IAAI+C,GAItB,OAAO+E,I,iCCxDN,IAAMU,EAAoE/G,IAAMC,MACrF,YAAwC,IAArC+G,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,OAAWC,EAAW,yCACrC,EAA0BxC,mBAASsC,GAAnC,mBAAO1I,EAAP,KAAc6I,EAAd,KAEMC,EAAiB1G,uBAAY,SAACiD,GAAuC,IAAD,IACxE,GAAyB,MAArB,UAAAA,EAAGC,cAAH,eAAWtF,OAAf,CAIA,IAAM+I,EAAS1I,SAAQ,UAACgF,EAAGC,cAAJ,aAAC,EAAWtF,QAE9BI,MAAM2I,IAAWC,SAASD,IAC7BF,EAASE,QANTF,EAAS,KAQV,IAEGI,EAAY7G,uBAAY,kBAAMuG,EAAO3I,KAAQ,CAAC2I,EAAQ3I,IAE5D,OACE,cAACkJ,EAAA,EAAD,aACElC,KAAK,SACLhH,MAAOA,EAAMiC,WACbkH,UAAW,SAAC9D,GAAD,OA1BnB,SAAoBA,EAAyB+D,GAC5B,UAAX/D,EAAGjG,KAAiBgK,EAAK/D,GAyBJgE,CAAWhE,EAAI4D,IAClCK,OAAQL,EACRM,QAASN,EACT1I,SAAUuI,GACNF,OC0HGY,EAzJ4C,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAE3D,EAAoCrD,mBAAS,GAA7C,mBAAOsD,EAAP,KAAmBC,EAAnB,KAEA,EAA0BvD,mBAAS,KAAnC,mBAAOwD,EAAP,KAAcC,EAAd,KACA,EAAsBzD,mBAAS5G,EAAU,MAAMC,UAA/C,mBAAOL,EAAP,KAAY0K,EAAZ,KACA,EAA8B1D,oBAAS,GAAvC,mBAAO2D,EAAP,KAAgBC,EAAhB,KAEMC,EAAUnK,mBAChB,EAA0CoK,qBACxCvC,EACA,MACA,kBAAMvG,MAAMsI,GAAYS,KAAK,IAAInH,MAHnC,mBAAOoH,EAAP,KAAsBC,EAAtB,KAMA,EAAsCjE,oBAAU,GAAhD,mBAAOkE,EAAP,KAAoBC,EAApB,KAEArI,qBAAU,WACRmI,EAAiB,CAAEvC,KAAM,YAAaxG,OAAQoI,MAC7C,CAACA,IAEJxH,qBAAU,WACR,GAAK6H,EAAL,CAEAS,IAAeC,IAAIzK,MAAQ4J,EAE3B,IAAMc,EAAM,IAAIF,KACd,SAACG,EAAMC,GACLL,EAAeK,GACfnB,EAAMoB,qBACJT,EAAcQ,GAAYE,WAC1B,KACAH,KAIJ1J,EAAM,EAAGmJ,EAAc9I,QACvB,MACAJ,MAAM,GAGR,OAFA+I,EAAQzJ,QAAUkK,EAEX,WAAO,IAAD,EACX,UAAAT,EAAQzJ,eAAR,SAAiBuK,cAElB,CAACX,EAAeR,EAAOxK,EAAK2K,EAASN,IAExC,IAAMuB,EAAiB5I,uBACrB,SAAUiD,GAIR,IAJ2C,IAAD,IACpC4F,EAASzL,EAAS,oBAAC6F,EAAGC,cAAJ,aAAC,EAAWtF,aAAZ,QAAqB,MAAMP,SAG1C+I,EAAI,EAAGA,EAAI4B,EAAc9I,OAAQkH,IAAK,CAC7C,IAAM0C,EAAWd,EAAc5B,GAC3BL,EAAW,IAAInF,EACjBkI,EAASjI,KACTiI,EAAS/K,KACT+K,EAAS/H,YAGLjE,EAASiJ,EAASlF,KAAKhE,YAAcG,EAAIH,YAC/CkJ,EAASlF,KAAOgI,EAAO/L,OAAOA,GAC9BmL,EAAiB,CAAEvC,KAAM,SAAUnB,MAAO6B,EAAGL,SAAUA,IAGzD2B,EAAOmB,KAET,CAACb,EAAehL,IAlEoD,4CAqEtE,4BAAA+L,EAAA,0DACkB,IAAZpB,EADN,gCAEUS,MAFV,OAGIR,GAAW,GACXQ,IAAetJ,MAAM,QAJzB,uBAMI,UAAA+I,EAAQzJ,eAAR,SAAiBuK,UACjBP,IAAeY,OACfpB,GAAW,GACXO,GAAgB,GATpB,6CArEsE,sBAkFtE,IAAMlB,EAAajH,uBACjB,SAACiD,EAAyB+D,GACT,UAAX/D,EAAGjG,KAAiBgK,EAAK/D,KAE/B,IAGIgG,EAAcjJ,uBAAY,SAACuE,EAAOE,GACtCwD,EAAiB,CACfvC,KAAM,SACNnB,MAAOA,EACPwB,SAAUtB,MAEX,IAEGyE,EAAaC,mBAAQ,iBAAO,CAACC,WAAY,CAACC,IAAK,EAAGC,IAAK,OAAO,IAC9DC,EAAaJ,mBAAQ,iBAAO,CAACK,MAAO,SAAS,IACnD,OACI,eAAC3E,EAAA,EAAD,WACE,eAAC1E,EAAA,EAAD,CACEC,WAAS,EACTmC,UAAU,MACVE,WAAW,WACXnC,QAAQ,eACRmJ,GAAI,EALN,UAOE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYxC,QA5GkC,2CA4G9D,UACe,IAAZQ,EAAoB,QAAU,SAEjC,cAACtB,EAAD,CACEC,aAAc,EACdnD,MAAM,aACNoD,OAAQgB,EACRqC,WAAYV,EACVvG,MAAO4G,IAEX,cAAClD,EAAD,CACEC,aAAc,IACdnD,MAAM,cACNoD,OAAQkB,EACR9E,MAAO4G,IAGT,cAACzC,EAAA,EAAD,CACER,aAAa,KACbS,UAAW,SAAC8C,GAAD,OAAO5C,EAAW4C,EAAGjB,IAChC1B,OAAQ0B,EACRzB,QAAS,SAAC0C,GAAD,OAAOjB,EAAeiB,IAC/B1G,MAAM,MACJR,MAAO4G,OAGb,cAACpJ,EAAA,EAAD,CAAMC,WAAS,EAAf,SACG4H,EAAc3J,KAAI,SAACoG,EAAcF,GAChC,OACE,cAACR,EAAD,CACES,QAASxH,EAETyH,MAAOA,EACPF,MAAOA,EACPD,cAAe,SAACG,GAAD,OAAWwE,EAAY1E,EAAOE,IAC7Cb,OAAQsE,IAAgB3D,GAJnBA,Y,iBC/HrB/I,IAEA,IAAM6L,GAAQ,IAAIe,IAAeA,IAAY,CAAE0B,QAAS,KAAMC,gBAExD1G,GAAYC,aAAW,SAACC,GAAD,MAAY,MAInCyG,GAAYC,YAAe,CAC/BvG,QAAS,CACPkB,KAAM,UAIV,SAASsF,KACQ7G,KAEf,OACE,eAAC,IAAD,CAAkBE,MAAOyG,GAAzB,UACA,cAACG,EAAA,EAAD,IACE,cAACtF,EAAA,EAAD,UACE,cAACuF,EAAA,EAAD,CAAaC,QAASC,IAAtB,SACE,cAAC,EAAD,CAAQjD,MAAOA,YAOzBkD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACP,GAAD,MAEFQ,SAASC,eAAe,U","file":"static/js/main.4a917170.chunk.js","sourcesContent":["import { Grid } from \"@material-ui/core\";\nimport React, { useEffect } from \"react\";\nimport { useRef } from \"react\";\n\n\nexport enum NoteLetter {\n  A = 'A',\n  B = 'B',\n  C = 'C',\n  D = 'D',\n  E = 'E',\n  F = 'F',\n  G = 'G'\n}\n\n\n\n\nexport class Note {\n  letter: NoteLetter = NoteLetter.A;\n  sharp: boolean = false;\n  octave: number = 0;\n\n  public getNumber(): number {\n    const noteLookup = 'CDEFGAB';\n    let noteIndex = noteLookup.indexOf(this.letter) * 2;\n    //if ((noteIndex / 2) > noteLookup.indexOf('B')) noteIndex -= 1;\n    if ((noteIndex / 2) > noteLookup.indexOf('E')) noteIndex -= 1;\n\n    const num = (this.octave * 12) + noteIndex + (this.sharp ? 1 : 0);\n    return num;\n  }\n\n  public getFreq(): number {\n    const twelfth_root = 1.059463094359;\n    return Math.pow(twelfth_root, this.getNumber() - 49) * 440;\n  }\n\n  public static fromNumber(number: number): Note {\n    const notes: Note[] = [\n      parseNote(\"C\").unwrap(),\n      parseNote(\"C#\").unwrap(),\n      parseNote(\"D\").unwrap(),\n      parseNote(\"D#\").unwrap(),\n      parseNote(\"E\").unwrap(),\n      parseNote(\"F\").unwrap(),\n      parseNote(\"F#\").unwrap(),\n      parseNote(\"G\").unwrap(),\n      parseNote(\"G#\").unwrap(),\n      parseNote(\"A\").unwrap(),\n      parseNote(\"A#\").unwrap(),\n      parseNote(\"B\").unwrap(),\n    ];\n\n\n    let note = notes[number % 12];\n    const octave = Math.floor(number / 12);\n\n    note.octave = octave;\n    return note;\n  }\n\n  // Get the note that is offset from this one by `offset` half-steps\n  public offset(offset: number): Note {\n    return Note.fromNumber(this.getNumber() + offset);\n  }\n\n  // Takes the form of A#3\n  public toString(): string {\n    return this.letter + (this.sharp ? '#' : '') + this.octave;\n  }\n\n  public getRelative(key: Note): string {\n    const keyDifference = (this.getNumber() - key.getNumber()) % 12;\n    let output = \"\";\n    switch (keyDifference) {\n      case 0:\n        output = \"I\";\n        break;\n      case 1:\n        output = \"#I\";\n        break;\n      case 2:\n        output = \"II\";\n        break;\n      case 3:\n        output = \"#II\";\n        break;\n      case 4:\n        output = \"III\";\n        break;\n      case 5:\n        output = \"IV\";\n        break;\n      case 6:\n        output = \"#IV\";\n        break;\n      case 7:\n        output = \"V\";\n        break;\n      case 8:\n        output = \"#V\";\n        break;\n      case 9:\n        output = \"VI\";\n        break;\n      case 10:\n        output = \"#VI\";\n        break;\n      case 11:\n        output = \"VII\";\n        break;\n      default:\n        output = \"???\";\n        break;\n    }\n    return output;\n  }\n}\n\nexport enum Mode {\n  Root = \"Root\",\n  Major = \"Major\",\n  Minor = \"Minor\",\n  Sus2 = \"Sus2\",\n  Sus4 = \"Sus4\",\n}\n\nexport function Modes(props: { onChange(mode: Mode): void, currentMode: Mode }): React.ReactElement {\n  const selectedRef = useRef<HTMLSelectElement>(null);\n\n  let modes = [];\n\n  for (const value in Mode) {\n    modes.push(value);\n  }\n\n  modes = modes.filter((mode) => isNaN(parseInt(mode)));\n\n  return (\n    <select\n      ref={selectedRef}\n      onChange={() =>\n        props.onChange((selectedRef.current?.value as any) as Mode)\n      }\n    >\n      {modes.map((val) => (\n        <option key={val} value={val} selected={val === props.currentMode}>\n          {val}\n        </option>\n      ))}\n    </select>\n  );\n}\n\n\nclass Maybe<T> {\n  #val: T | null;\n  constructor(val: T | null) {\n    this.#val = val;\n  }\n\n  public unwrap(): T {\n    return this.#val as T;\n  }\n\n  public isSome(): boolean {\n    return (this.#val !== null);\n  }\n}\n\nfunction Some<T>(val: T): Maybe<T> {\n  return new Maybe(val);\n}\nfunction None<T>(): Maybe<T> {\n  return new Maybe<T>(null);\n}\n\n\n// Takes the form of A#3\nexport function parseNote(note: string): Maybe<Note> {\n  const letter = note[0]?.toUpperCase() ?? 'C';\n  const sharp = note[1] === \"#\";\n\n  let octave: number;\n  if (note[1] && note[2])\n    octave = parseInt(note[2]);\n  else if (!sharp && note[1])\n    octave = parseInt(note[1]);\n  else\n    octave = 4;\n\n  if (!(letter in NoteLetter))\n    return None<Note>();\n\n  let retNote = new Note();\n  retNote.letter = letter as NoteLetter;\n  retNote.octave = octave;\n  retNote.sharp = sharp;\n\n  return Some(retNote);\n}\n\n\n\nexport const range = (start: number, end: number) => Array.from({ length: (end - start) }, (v, k) => k + start);\n\nexport interface NotesProps {\n  startingNote: Note,\n  onChange: (note: Note) => void\n}\n\nexport const Notes = React.memo(function (props: NotesProps): React.ReactElement {\n  const noteRef = useRef<HTMLSelectElement>(null);\n  const startingNumber = props.startingNote.getNumber();\n  console.log(\"note: \" + props.startingNote.toString() + \"number: \" + startingNumber);\n\n\n  React.useEffect(() => props.onChange(Note.fromNumber(parseInt(noteRef.current?.value ?? '0'))), [props.startingNote]);\n\n  // Create the string for the dropdown. We want it in the form of C#5   (IV) with an equal spacing.\n  const createDropdownText = React.useCallback((num) => {\n    // Get the note in string form.\n    let noteString = props.startingNote.offset(num).toString();\n    // Get the relative note in string form (roman numerals)\n    let relativeString = \"(\" + props.startingNote.offset(num).getRelative(props.startingNote) + \")\";\n\n    return noteString + '    ' + relativeString;\n\n\n  }, [props.startingNote]);\n\n\n  return (\n    <Grid container item justify=\"center\">\n      <select ref={noteRef} onChange={() => props.onChange(Note.fromNumber(parseInt(noteRef.current?.value ?? '0' /*We need to explicitly nullcheck here even though it's impossible for this to ever be null */)))}>\n        {range(0, 12).map((num) => {\n          return (<option key={num} value={startingNumber + num}> {createDropdownText(num)} </option>);\n        })}\n      </select>\n    </Grid>);\n});\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport { useRef, useState } from \"react\";\nimport {\n  Box,\n  Paper,\n  Grid,\n  FormControlLabel,\n  Checkbox,\n} from \"@material-ui/core\";\nimport { colors } from \"@material-ui/core/\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Notes, Note, Modes, Mode, parseNote } from \"./Notes\";\nimport { omitFromObject } from \"tone/build/esm/core/util/Defaults\";\nimport { useDrag } from \"react-dnd\";\n\nexport enum ExtensionState {\n  Off = 0,\n  Normal = 1,\n  Flat = 2,\n  Sharp = 3,\n}\n\nexport class Extensions {\n  seventh: ExtensionState = ExtensionState.Off;\n  ninth: ExtensionState = ExtensionState.Off;\n  eleventh: ExtensionState = ExtensionState.Off;\n}\n\nexport class Chord {\n  base: Note;\n  mode: Mode;\n  extensions: Extensions;\n\n  constructor(\n    base: Note = parseNote(\"C4\").unwrap(),\n    mode: Mode = Mode.Major,\n    extensions: Extensions = new Extensions()\n  ) {\n    this.base = base;\n    this.mode = mode;\n    this.extensions = extensions;\n  }\n\n  public getArray(): string[] {\n    const patterns: { [K in Mode]: number[] } = {\n      [Mode.Major]: [0, 4, 7],\n      [Mode.Minor]: [0, 3, 7],\n      [Mode.Root]: [0, 7],\n      [Mode.Sus2]: [0, 2, 7],\n      [Mode.Sus4]: [0, 5, 7],\n    };\n\n    let notes = [];\n\n    for (let num of patterns[this.mode]) {\n      notes.push(this.base.offset(num).toString());\n    }\n\n    // TODO: Calculate these offsets instead of hardcoding them\n    // Seventh = 10 half-steps\n    // Ninth = 14 half-steps\n    // Eleventh = 17 half-steps\n\n    function getExtensionOffset(\n      extension:\n        | ExtensionState.Flat\n        | ExtensionState.Normal\n        | ExtensionState.Sharp\n    ): number {\n      return [-1, 0, 1][\n        [\n          ExtensionState.Flat,\n          ExtensionState.Normal,\n          ExtensionState.Sharp,\n        ].indexOf(extension)\n      ];\n    }\n\n    if (this.extensions.seventh !== ExtensionState.Off)\n      notes.push(\n        this.base\n          .offset(10 + getExtensionOffset(this.extensions.seventh))\n          .toString()\n      );\n\n    if (this.extensions.ninth !== ExtensionState.Off)\n      notes.push(\n        this.base\n          .offset(14 + getExtensionOffset(this.extensions.ninth))\n          .toString()\n      );\n\n    if (this.extensions.eleventh !== ExtensionState.Off)\n      notes.push(\n        this.base\n          .offset(17 + getExtensionOffset(this.extensions.eleventh))\n          .toString()\n      );\n\n    return notes;\n  }\n\n  public isEqual(rhs: Chord): boolean {\n    return JSON.stringify(this) === JSON.stringify(rhs);\n  }\n}\n\nconst ChordExtension = React.memo(function (props: {\n  number: number;\n  extensionState: ExtensionState;\n  updateExtension(newExtension: ExtensionState): void;\n}): React.ReactElement {\n  const firstRef = useRef<HTMLInputElement>(null);\n  const secondRef = useRef<HTMLInputElement>(null);\n  const thirdRef = useRef<HTMLInputElement>(null);\n\n  const updateExtension = React.useCallback(\n    function (targetIndex: 0 | 1 | 2, targetState: boolean) {\n      if (targetState === false) {\n        props.updateExtension(ExtensionState.Off);\n        return;\n      }\n      if (\n        firstRef.current === null ||\n        secondRef.current === null ||\n        thirdRef.current === null\n      )\n        return;\n\n      firstRef.current.checked = false;\n      secondRef.current.checked = false;\n      thirdRef.current.checked = false;\n\n      [firstRef.current, secondRef.current, thirdRef.current][\n        targetIndex\n      ].checked = true;\n\n      let extensionState = [\n        ExtensionState.Flat,\n        ExtensionState.Normal,\n        ExtensionState.Sharp,\n      ][targetIndex];\n\n      props.updateExtension(extensionState);\n    },\n    [props]\n  );\n\n  return (\n    <Grid\n      container\n      item\n      direction=\"row\"\n      justify=\"space-between\"\n      wrap=\"nowrap\"\n      alignItems=\"center\"\n    >\n      <FormControlLabel\n        style={{ margin: 0 }}\n        control={\n          <Checkbox\n            color=\"secondary\"\n            inputRef={firstRef}\n            checked={props.extensionState === ExtensionState.Flat}\n            onChange={(ev) => updateExtension(0, ev.target.checked)}\n          />\n        }\n        label=\"♭\"\n        labelPlacement=\"top\"\n      />\n      <FormControlLabel\n        style={{ margin: 0 }}\n        control={\n          <Checkbox\n            color=\"secondary\"\n            inputRef={secondRef}\n            checked={props.extensionState === ExtensionState.Normal}\n            onChange={(ev) => updateExtension(1, ev.target.checked)}\n          />\n        }\n        label={props.number}\n        labelPlacement=\"top\"\n      />\n      <FormControlLabel\n        style={{ margin: 0 }}\n        control={\n          <Checkbox\n            color=\"secondary\"\n            inputRef={thirdRef}\n            checked={props.extensionState === ExtensionState.Sharp}\n            onChange={(ev) => updateExtension(2, ev.target.checked)}\n          />\n        }\n        label=\"♯\"\n        labelPlacement=\"top\"\n      />\n    </Grid>\n  );\n});\n\nconst useStyles = makeStyles((theme) => ({\n  inactive: {\n    background: theme.palette.background.paper,\n  },\n\n  active: {\n    background: theme.palette.primary.dark,\n  },\n}));\n\nexport const ChordPiece = React.memo(\n  function (props: {\n    baseKey: Note;\n    chord: Chord;\n    onChordChange: (chord: Chord, index: number) => void;\n    index: number;\n    active: boolean;\n  }): React.ReactElement {\n    const [mode, setMode] = useState(Mode.Major);\n    const [note, setNote] = useState(parseNote(\"C4\").unwrap());\n\n    const [seventh, setSeventh] = useState(ExtensionState.Off);\n    const [ninth, setNinth] = useState(ExtensionState.Off);\n    const [eleventh, setEleventh] = useState(ExtensionState.Off);\n\n    const { onChordChange, index, baseKey } = props;\n    React.useEffect(() => {\n      const chord = new Chord(note, mode, { seventh, ninth, eleventh });\n      // safe to ignore because the function only modifies an object so everything is references\n      onChordChange(chord, index);\n      //eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [mode, note, seventh, ninth, eleventh, index]);\n\n    const classes = useStyles();\n\n    const [_, dragRef] = useDrag({\n      type: \"Chord\",\n    });\n\n    return (\n      // we need to ingore this because the TS def for box is missing ref\n      // @ts-ignore\n      <Box pt={1} mr={1} mt={0.5} ref={props.ref}>\n        <Paper elevation={5} className={props.active ? classes.active : classes.inactive}>\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"stretch\"\n            justify=\"space-around\"\n            spacing={2}\n          >\n            <Notes startingNote={baseKey} onChange={setNote}></Notes>\n            <Grid container item justify=\"center\">\n              <Modes onChange={setMode} currentMode={mode}></Modes>\n            </Grid>\n            <Grid container item direction=\"column\" alignItems=\"center\">\n              <ChordExtension\n                number={7}\n                extensionState={seventh}\n                updateExtension={setSeventh}\n              />\n              <ChordExtension\n                number={9}\n                extensionState={ninth}\n                updateExtension={setNinth}\n              />\n              <ChordExtension\n                number={11}\n                extensionState={eleventh}\n                updateExtension={setEleventh}\n              />\n            </Grid>\n          </Grid>\n        </Paper>\n      </Box>\n    );\n  },\n  (prevProps, nextProps) =>\n    JSON.stringify(prevProps) === JSON.stringify(nextProps)\n);\n","import { Chord } from \"./Music/Chords\";\n\ninterface ChordSequenceAdd {\n  kind: \"add\";\n  newChord: Chord;\n  // if undefined, last\n  index?: number;\n}\ninterface ChordSequenceRemove {\n  kind: \"remove\";\n  startIndex: number;\n  endIndex: number;\n}\ninterface ChordSequenceUpdate {\n  kind: \"update\";\n  index: number;\n  newChord: Chord;\n}\ninterface ChordSequenceMove {\n  kind: \"move\";\n  oldIndex: number;\n  newIndex: number;\n}\n\ninterface ChordSequenceSetLength {\n  kind: \"setLength\";\n  length: number;\n}\n\ntype Action =\n  | ChordSequenceAdd\n  | ChordSequenceRemove\n  | ChordSequenceUpdate\n  | ChordSequenceMove\n  | ChordSequenceSetLength;\n\nconst chordSequenceReducer = (oldState: Chord[], action: Action): Chord[] => {\n  switch (action.kind) {\n    case \"add\": {\n      let newState = oldState.slice();\n      if (action.index === undefined) action.index = -1;\n      newState.splice(action.index, 0, action.newChord);\n      return newState;\n    }\n\n    case \"remove\": {\n      let newState = oldState.slice();\n      newState.splice(action.startIndex, action.endIndex - action.startIndex);\n      return newState;\n    }\n    case \"update\": {\n      let newState = oldState.slice();\n      newState[action.index] = action.newChord;\n      return newState;\n    }\n    case \"move\": {\n      let newState = oldState.slice();\n      let chord = newState.splice(action.oldIndex, 1)[0];\n      newState.splice(action.newIndex, 0, chord);\n      return newState;\n    }\n    case \"setLength\": {\n      let newState = oldState.slice(0, action.length);\n      if (action.length > oldState.length) {\n        for (let i = oldState.length; i < action.length; i++) {\n          newState.push(new Chord());\n        }\n      }\n\n      return newState;\n    }\n  }\n};\n\nexport default chordSequenceReducer;\n","import { ChangeEvent, FunctionComponent, useCallback, useState } from \"react\";\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\nimport React from \"react\";\n\ninterface NumberFieldProps {\n  defaultValue: number;\n  update: (num: number) => void;\n}\n\nfunction pressEnter(ev: React.KeyboardEvent, func: (ev: any) => void) {\n  if (ev.key === \"Enter\") func(ev as any);\n}\n\nexport const NumberField: FunctionComponent<NumberFieldProps & TextFieldProps> = React.memo(\n  ({ defaultValue, update, ...rest }) => {\n    const [value, setValue] = useState(defaultValue);\n\n    const validateChange = useCallback((ev: ChangeEvent<HTMLInputElement>) => {\n      if (ev.target?.value === \"\") {\n        setValue(0);\n        return;\n      }\n      const newVal = parseInt(ev.target?.value);\n\n      if (!isNaN(newVal) && isFinite(newVal)) {\n        setValue(newVal);\n      }\n    }, []);\n\n    const updateVal = useCallback(() => update(value), [update, value]);\n\n    return (\n      <TextField\n        type=\"number\"\n        value={value.toString()}\n        onKeyDown={(ev) => pressEnter(ev, updateVal)}\n        onBlur={updateVal}\n        onClick={updateVal}\n        onChange={validateChange}\n        {...rest}\n      />\n    );\n  });\n\ninterface BlurFieldProps {\n  validate: (raw: string) => boolean;\n  blur: (value: string) => void;\n}\nconst BlurField: FunctionComponent<BlurFieldProps & TextFieldProps> = ({\n  validate,\n  blur,\n  ...rest\n}) => {\n  const [value, setValue] = useState(\"\");\n\n  const validateChange = useCallback(\n    (ev: ChangeEvent<HTMLInputElement>) => {\n      const newVal = ev.target?.value;\n      if (validate(newVal)) setValue(newVal);\n    },\n    [validate]\n  );\n\n  return (\n    <TextField onChange={validateChange} onBlur={() => blur(value)} {...rest} />\n  );\n};\n","import React, {FunctionComponent, FocusEvent, useCallback, useEffect, useMemo, useReducer, useRef, useState} from \"react\";\nimport chordSequenceReducer from \"./ChordSequenceReducer\";\nimport {parseNote, range} from \"./Music/Notes\";\nimport * as Tone from \"tone\";\nimport {Chord, ChordPiece} from \"./Music/Chords\";\nimport {Box, Button, Grid, TextField} from \"@material-ui/core\";\nimport {NumberField} from \"./Fields\";\n\nconst Player: FunctionComponent<{synth: Tone.PolySynth}> = ({synth}) => {\n\n  const [chordCount, setChordCount] = useState(4);\n\n  const [tempo, setTempo] = useState(120);\n  const [key, setKey] = useState(parseNote(\"C4\").unwrap());\n  const [playing, setPlaying] = useState(false);\n\n  const toneSeq = useRef<Tone.Sequence<number>>();\n  const [chordSequence, dispatchSequence] = useReducer(\n    chordSequenceReducer,\n    null,\n    () => Array(chordCount).fill(new Chord())\n  );\n\n  const [activeChord, setActiveChord] = useState(-1);\n\n  useEffect(() => {\n    dispatchSequence({ kind: \"setLength\", length: chordCount });\n  }, [chordCount]);\n\n  useEffect(() => {\n    if (!playing) return;\n\n    Tone.Transport.bpm.value = tempo;\n\n    const seq = new Tone.Sequence(\n      (time, chordIndex) => {\n        setActiveChord(chordIndex);\n        synth.triggerAttackRelease(\n          chordSequence[chordIndex].getArray(),\n          \"8n\",\n          time\n        );\n        // subdivisions are given as subarrays\n      },\n      range(0, chordSequence.length),\n      \"4n\"\n    ).start(0);\n    toneSeq.current = seq;\n\n    return () => {\n      toneSeq.current?.dispose();\n    };\n  }, [chordSequence, tempo, key, playing, synth]);\n\n  const consolidateKey = useCallback(\n    function (ev: FocusEvent<HTMLInputElement>) {\n      const newKey = parseNote(ev.target?.value ?? \"C4\").unwrap();\n      // We need to update all the chords at once\n\n      for (let i = 0; i < chordSequence.length; i++) {\n        const oldChord = chordSequence[i];\n        let newChord = new Chord(\n          oldChord.base,\n          oldChord.mode,\n          oldChord.extensions\n        );\n\n        const offset = newChord.base.getNumber() - key.getNumber();\n        newChord.base = newKey.offset(offset);\n        dispatchSequence({ kind: \"update\", index: i, newChord: newChord });\n      }\n\n      setKey(newKey);\n    },\n    [chordSequence, key]\n  );\n\n  async function togglePlay() {\n    if (playing === false) {\n      await Tone.start();\n      setPlaying(true);\n      Tone.Transport.start(\"+0.1\");\n    } else {\n      toneSeq.current?.dispose();\n      Tone.Transport.stop();\n      setPlaying(false);\n      setActiveChord(-1);\n    }\n  }\n\n  const pressEnter = useCallback(\n    (ev: React.KeyboardEvent, func: (ev: any) => void) => {\n      if (ev.key === \"Enter\") func(ev as any);\n    },\n    []\n  );\n\n  const updateChord = useCallback((index, chord) => {\n    dispatchSequence({\n      kind: \"update\",\n      index: index,\n      newChord: chord,\n    });\n  }, []);\n\n  const countProps = useMemo(() => ({inputProps: {min: 0, max: 30}}), []);\n  const countStyle = useMemo(() => ({width: \"25%\"}), []);\n  return (\n      <Box>\n        <Grid\n          container\n          direction=\"row\"\n          alignItems=\"flex-end\"\n          justify=\"space-evenly\"\n          xs={3}\n        >\n          <Button variant=\"contained\" onClick={togglePlay}>\n            {playing === false ? \"Start\" : \"Stop\"}\n          </Button>\n          <NumberField\n            defaultValue={4}\n            label=\"Note Count\"\n            update={setChordCount}\n            InputProps={countProps}\n              style={countStyle}\n          />\n          <NumberField\n            defaultValue={120}\n            label=\"Tempo (BPM)\"\n            update={setTempo}\n            style={countStyle}\n          />\n\n          <TextField\n            defaultValue=\"C4\"\n            onKeyDown={(e) => pressEnter(e, consolidateKey)}\n            onBlur={consolidateKey}\n            onClick={(e) => consolidateKey(e as any)}\n            label=\"Key\"\n              style={countStyle}\n          />\n        </Grid>\n        <Grid container>\n          {chordSequence.map((chord: Chord, index: number) => {\n            return (\n              <ChordPiece\n                baseKey={key}\n                key={index}\n                chord={chord}\n                index={index}\n                onChordChange={(chord) => updateChord(index, chord)}\n                active={activeChord === index}\n              />\n            );\n          })}\n        </Grid>\n      </Box>\n  );\n};\n\n\nexport default Player;\n","import {\n  Box,\n  CssBaseline,\n  makeStyles,\n  createMuiTheme,\n  ThemeProvider,\n  MuiThemeProvider,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Tone from \"tone\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Player from \"./Player\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nconst synth = new Tone.PolySynth(Tone.Synth, { volume: -15 }).toDestination();\n\nconst useStyles = makeStyles((theme) => ({\n\n}));\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nfunction Home(): React.ReactElement {\n  const styles = useStyles();\n\n  return (\n    <MuiThemeProvider theme={darkTheme}>\n    <CssBaseline />\n      <Box>\n        <DndProvider backend={HTML5Backend}>\n          <Player synth={synth} />\n        </DndProvider>\n      </Box>\n    </MuiThemeProvider>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}